@{
    ViewData["Title"] = ViewBag.Title ?? "Á¥î API ÊñπÂºèÊºîÁ§∫";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="demo-page">
    <!-- È†ÅÈù¢Ê®ôÈ°å -->
    <div class="demo-header bg-dark text-white">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb bg-transparent">
                            <li class="breadcrumb-item">
                                <a href="@Url.Action("Index")" class="text-white">
                                    <i class="fas fa-home me-1"></i>ÊºîÁ§∫È¶ñÈ†Å
                                </a>
                            </li>
                            <li class="breadcrumb-item active text-white" aria-current="page">
                                Á¥î API ÊñπÂºè
                            </li>
                        </ol>
                    </nav>
                    
                    <h1 class="display-5 mb-3">
                        <i class="fas fa-code me-3"></i>Á¥î API ÊñπÂºè
                    </h1>
                    <p class="lead mb-4">
                        @(ViewBag.Description ?? "ÂÆåÂÖ®‰ΩøÁî® JavaScript + REST APIÔºåÈÅ©ÂêàÁèæ‰ª£ÂâçÁ´ØÊ°ÜÊû∂")
                    </p>
                    
                    <div class="alert alert-info d-inline-block">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>ÈÄöÁî®Ê∏¨Ë©¶Ê®°ÁµÑÔºö</strong>ÊîØÊè¥Ëá™ÈÅ∏ÂØ¶È´îÈ°ûÂûãÂíå IDÔºåÈÅ©Áî®Êñº‰ªª‰ΩïÊ•≠ÂãôÂ†¥ÊôØ
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container my-5">
        <!-- Êû∂ÊßãË™™Êòé -->
        <div class="row mb-5">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-header bg-dark text-white">
                        <h3 class="mb-0">
                            <i class="fas fa-rocket me-2"></i>Áèæ‰ª£ÂåñÊû∂ÊßãÂÑ™Âã¢
                        </h3>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h5 class="text-dark">üèóÔ∏è ÊäÄË°ìÊû∂Êßã</h5>
                                <div class="architecture-flow">
                                    <div class="flow-step">
                                        <span class="badge bg-primary">ÂâçÁ´Ø JavaScript</span>
                                        <div class="flow-arrow">‚¨áÔ∏è</div>
                                    </div>
                                    <div class="flow-step">
                                        <span class="badge bg-success">HTTP API ÂëºÂè´</span>
                                        <div class="flow-arrow">‚¨áÔ∏è</div>
                                    </div>
                                    <div class="flow-step">
                                        <span class="badge bg-info">JSON Ë≥áÊñô‰∫§Êèõ</span>
                                        <div class="flow-arrow">‚¨áÔ∏è</div>
                                    </div>
                                    <div class="flow-step">
                                        <span class="badge bg-warning">ÂãïÊÖã UI Êõ¥Êñ∞</span>
                                    </div>
                                </div>
                                
                                <div class="api-features mt-3">
                                    <h6 class="text-primary">üöÄ Áèæ‰ª£ÂåñÁâπËâ≤</h6>
                                    <ul class="list-unstyled">
                                        <li><i class="fas fa-bolt text-warning me-2"></i>Âç≥ÊôÇÈüøÊáâ</li>
                                        <li><i class="fas fa-mobile-alt text-info me-2"></i>Ë∑®Âπ≥Âè∞ÊîØÊè¥</li>
                                        <li><i class="fas fa-cogs text-secondary me-2"></i>ÂÆåÂÖ®ÂÆ¢Ë£ΩÂåñ</li>
                                        <li><i class="fab fa-js text-success me-2"></i>Áèæ‰ª£Ê°ÜÊû∂Êï¥Âêà</li>
                                    </ul>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <h5 class="text-dark">üìù API Á´ØÈªû</h5>
                                <div class="api-endpoints">
                                    <div class="endpoint-item">
                                        <span class="method method-get">GET</span>
                                        <code>/api/ImageManagerApi/list</code>
                                    </div>
                                    <div class="endpoint-item">
                                        <span class="method method-post">POST</span>
                                        <code>/api/ImageManagerApi/upload</code>
                                    </div>
                                    <div class="endpoint-item">
                                        <span class="method method-delete">DELETE</span>
                                        <code>/api/ImageManagerApi/delete/{id}</code>
                                    </div>
                                    <div class="endpoint-item">
                                        <span class="method method-post">POST</span>
                                        <code>/api/ImageManagerApi/reorder</code>
                                    </div>
                                </div>
                                
                                <div class="mt-3">
                                    <h6 class="text-primary">üîß ÊîØÊè¥Ê°ÜÊû∂</h6>
                                    <div class="framework-badges">
                                        <span class="badge bg-info me-1">React</span>
                                        <span class="badge bg-success me-1">Vue.js</span>
                                        <span class="badge bg-danger me-1">Angular</span>
                                        <span class="badge bg-primary me-1">React Native</span>
                                        <span class="badge bg-secondary me-1">Á¥î JavaScript</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- ÂØ¶È´îÈÅ∏ÊìáÈÖçÁΩÆ -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-header bg-warning text-dark">
                        <h3 class="mb-0">
                            <i class="fas fa-cog me-2"></i>Ê∏¨Ë©¶ÈÖçÁΩÆ
                        </h3>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-3">
                                <label for="entityTypeSelect" class="form-label">
                                    <i class="fas fa-cube me-1"></i>ÂØ¶È´îÈ°ûÂûã
                                </label>
                                <select id="entityTypeSelect" class="form-select" onchange="updateConfig()">
                                    @foreach (var entityType in ViewBag.EntityTypes)
                                    {
                                        if (entityType.Value == ViewBag.DefaultEntityType)
                                        {
                                            <option value="@entityType.Value" selected>@entityType.Text</option>
                                        }
                                        else
                                        {
                                            <option value="@entityType.Value">@entityType.Text</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label for="entityIdInput" class="form-label">
                                    <i class="fas fa-hashtag me-1"></i>ÂØ¶È´î ID
                                </label>
                                <input type="number" id="entityIdInput" class="form-control" 
                                       value="@ViewBag.DefaultEntityId" min="1" onchange="updateConfig()">
                            </div>
                            <div class="col-md-3">
                                <label for="categorySelect" class="form-label">
                                    <i class="fas fa-tags me-1"></i>ÂúñÁâáÂàÜÈ°û
                                </label>
                                <select id="categorySelect" class="form-select" onchange="updateConfig()">
                                    <option value="0">Gallery (Â±ïÁ§∫)</option>
                                    <option value="1">Profile (ÂÄã‰∫∫Ë≥áÊñô)</option>
                                    <option value="2">Thumbnail (Á∏ÆÂúñ)</option>
                                    <option value="3">Document (Êñá‰ª∂)</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">
                                    <i class="fas fa-shield-alt me-1"></i>È©óË≠âË®≠ÂÆö
                                </label>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="skipValidationCheck" onchange="updateConfig()">
                                    <label class="form-check-label" for="skipValidationCheck">
                                        Áï•ÈÅéÂØ¶È´îÈ©óË≠â
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="mt-3">
                            <div class="alert alert-light mb-0">
                                <small class="text-muted">
                                    <i class="fas fa-info-circle me-1"></i>
                                    Áï∂ÂâçÊ∏¨Ë©¶ÁõÆÊ®ôÔºö<span id="currentTarget"></span>
                                    <span id="validationStatus" class="badge bg-secondary ms-2"></span>
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- API Ê∏¨Ë©¶Â∑•ÂÖ∑ -->
        <div class="row mb-5">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-header bg-primary text-white">
                        <h3 class="mb-0">
                            <i class="fas fa-flask me-2"></i>Âç≥ÊôÇ API Ê∏¨Ë©¶Â∑•ÂÖ∑
                        </h3>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="card border-success">
                                    <div class="card-header bg-success text-white">
                                        <h5 class="mb-0">
                                            <i class="fas fa-list me-2"></i>ÂèñÂæóÂúñÁâáÊ∏ÖÂñÆ
                                        </h5>
                                    </div>
                                    <div class="card-body">
                                        <button class="btn btn-success w-100" onclick="testGetImages()">
                                            <i class="fas fa-download me-2"></i>GET /api/ImageManagerApi/List
                                        </button>
                                        <small class="text-muted mt-2 d-block">ÂèñÂæóÊåáÂÆöÂØ¶È´îÁöÑÊâÄÊúâÂúñÁâá</small>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col-md-4">
                                <div class="card border-info">
                                    <div class="card-header bg-info text-white">
                                        <h5 class="mb-0">
                                            <i class="fas fa-upload me-2"></i>‰∏äÂÇ≥ÂúñÁâá
                                        </h5>
                                    </div>
                                    <div class="card-body">
                                        <input type="file" id="apiTestFiles" class="form-control mb-2" multiple accept="image/*">
                                        <button class="btn btn-info w-100" onclick="testUploadImages()">
                                            <i class="fas fa-cloud-upload-alt me-2"></i>POST /api/ImageManagerApi/Upload
                                        </button>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col-md-4">
                                <div class="card border-warning">
                                    <div class="card-header bg-warning text-dark">
                                        <h5 class="mb-0">
                                            <i class="fas fa-sort me-2"></i>Êõ¥Êñ∞ÊéíÂ∫è
                                        </h5>
                                    </div>
                                    <div class="card-body">
                                        <button class="btn btn-warning w-100" onclick="testReorderImages()">
                                            <i class="fas fa-random me-2"></i>PUT /api/ImageManagerApi/Reorder
                                        </button>
                                        <small class="text-muted mt-2 d-block">Èö®Ê©üÈáçÊñ∞ÊéíÂ∫èÁèæÊúâÂúñÁâá</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- API ÂõûÊáâÈ°ØÁ§∫ -->
                        <div class="mt-4">
                            <h5>
                                <i class="fas fa-terminal me-2"></i>API ÂõûÊáâ
                            </h5>
                            <div id="apiResponse" class="api-response">
                                <p class="text-muted">ÈªûÊìä‰∏äÊñπÊåâÈàïÊ∏¨Ë©¶ APIÔºåÂõûÊáâÂ∞áÂú®ÈÄôË£°È°ØÁ§∫...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tag Helper ÂúñÁâáÁÆ°ÁêÜÂô®ÊºîÁ§∫ -->
        <div class="row mb-5">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-header bg-success text-white">
                        <h3 class="mb-0">
                            <i class="fas fa-magic me-2"></i>Tag Helper ÂúñÁâáÁÆ°ÁêÜÂô®
                            <span class="badge bg-light text-dark ms-2">Áµ±‰∏ÄÁµÑ‰ª∂</span>
                        </h3>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-success" role="alert">
                            <i class="fas fa-rocket me-2"></i>
                            <strong>ÁîüÁî¢Á¥öÁµÑ‰ª∂Ôºö</strong>
                            ‰ΩøÁî®Áµ±‰∏ÄÂúñÁâáÁÆ°ÁêÜÁµÑ‰ª∂ÔºåÊîØÊè¥ÊãñÊãΩÊéíÂ∫è„ÄÅ‰∏ªÂúñË®≠ÂÆö„ÄÅÂç≥ÊôÇÈ†êË¶ΩÁ≠âÂÆåÊï¥ÂäüËÉΩ„ÄÇ
                        </div>

                        <!-- ÂØ¶È´îÂèÉÊï∏ÈÅ∏Êìá -->
                        <div class="row mb-4">
                            <div class="col-md-3">
                                <label class="form-label">ÂØ¶È´îÈ°ûÂûã</label>
                                <select class="form-select" id="entityTypeSelect">
                                    <option value="1" selected>Property (ÊàøÊ∫ê)</option>
                                    <option value="2">Member (ÊúÉÂì°)</option>
                                    <option value="3">Furniture (ÂÆ∂ÂÖ∑)</option>
                                    <option value="4">Announcement (ÂÖ¨Âëä)</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">ÂØ¶È´î ID</label>
                                <input type="number" class="form-control" id="entityIdInput" value="2006" min="1">
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">ÂúñÁâáÂàÜÈ°û</label>
                                <select class="form-select" id="categorySelect">
                                    <option value="1" selected>Gallery (Áõ∏Á∞ø)</option>
                                    <option value="2">Avatar (È†≠ÂÉè)</option>
                                    <option value="3">Product (Áî¢ÂìÅ)</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Êìç‰Ωú</label>
                                <button class="btn btn-primary w-100" onclick="updateImageManager()">
                                    <i class="fas fa-sync me-1"></i>Â•óÁî®Ë®≠ÂÆö
                                </button>
                            </div>
                        </div>

                        <!-- Tag Helper ÂúñÁâáÁÆ°ÁêÜÂô® -->
                        <div id="imageManagerContainer">
                            <zh-image-manager entity-type="Property" entity-id="2006" category="Gallery" max-count="15"></zh-image-manager>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Ëá™Âª∫ÂúñÁâáÁÆ°ÁêÜÂô® -->
        <div class="row">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-header bg-dark text-white">
                        <h3 class="mb-0">
                            <i class="fas fa-desktop me-2"></i>Á¥î API Ëá™Âª∫ÂúñÁâáÁÆ°ÁêÜÂô®
                            <span class="badge bg-warning ms-2">Á¥î JavaScript</span>
                        </h3>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info" role="alert">
                            <i class="fas fa-code me-2"></i>
                            <strong>ÂéüÂßãÂØ¶‰ΩúÔºö</strong>
                            ‰ΩøÁî®Á¥î JavaScript + REST API ÁöÑÂÆåÊï¥Ëá™Âª∫ÂØ¶‰ΩúÔºåÂ±ïÁ§∫Â¶Ç‰Ωï‰∏ç‰æùË≥¥ÁµÑ‰ª∂Â∫´ÈÄ≤Ë°åÈñãÁôº„ÄÇ
                        </div>

                        <!-- ÊéßÂà∂Èù¢Êùø -->
                        <div class="row mb-4">
                            <div class="col-md-3">
                                <label class="form-label">ÂØ¶È´îÈ°ûÂûã</label>
                                <select class="form-select" id="customEntityTypeSelect" onchange="updateConfig()">
                                    <option value="1" selected>Property (ÊàøÊ∫ê)</option>
                                    <option value="2">Member (ÊúÉÂì°)</option>
                                    <option value="3">Furniture (ÂÆ∂ÂÖ∑)</option>
                                    <option value="4">Announcement (ÂÖ¨Âëä)</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">ÂØ¶È´î ID</label>
                                <input type="number" class="form-control" id="customEntityIdInput" value="2006" min="1" onchange="updateConfig()">
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">ÂúñÁâáÂàÜÈ°û</label>
                                <select class="form-select" id="customCategorySelect" onchange="updateConfig()">
                                    <option value="0" selected>Gallery (Â±ïÁ§∫)</option>
                                    <option value="1">Profile (ÂÄã‰∫∫Ë≥áÊñô)</option>
                                    <option value="2">Thumbnail (Á∏ÆÂúñ)</option>
                                    <option value="3">Document (Êñá‰ª∂)</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Êìç‰Ωú</label>
                                <button class="btn btn-success w-100" onclick="loadImages()">
                                    <i class="fas fa-sync me-1"></i>ÈáçÊñ∞ËºâÂÖ•
                                </button>
                            </div>
                        </div>

                        <!-- ‰∏äÂÇ≥ÂçÄÂüü -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <div class="upload-section">
                                    <input type="file" id="fileInput" multiple accept="image/*" style="display: none;" onchange="handleFileSelect(event)">
                                    <button class="btn btn-primary me-2" onclick="document.getElementById('fileInput').click()">
                                        <i class="fas fa-plus me-1"></i>ÈÅ∏ÊìáÊ™îÊ°à
                                    </button>
                                    <button class="btn btn-warning me-2" onclick="toggleBatchMode()">
                                        <i class="fas fa-check-square me-1"></i>ÊâπÈáèÊìç‰Ωú
                                    </button>
                                    <button class="btn btn-danger" onclick="deleteSelectedImages()" disabled id="deleteSelectedBtn">
                                        <i class="fas fa-trash me-1"></i>Âà™Èô§ÈÅ∏‰∏≠
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- ÊãñÊãΩ‰∏äÂÇ≥ÂçÄÂüü -->
                        <div id="dropZone" class="drop-zone mb-3" 
                             ondrop="handleDrop(event)" 
                             ondragover="handleDragOver(event)" 
                             ondragleave="handleDragLeave(event)"
                             ondragenter="handleDragOver(event)">
                            <div class="drop-zone-content">
                                <i class="fas fa-cloud-upload-alt fa-3x text-muted mb-3"></i>
                                <h5 class="text-muted">ÊãñÊãΩÊ™îÊ°àÂà∞ÈÄôË£°‰∏äÂÇ≥</h5>
                                <p class="text-muted">ÊàñÈªûÊìä„ÄåÈÅ∏ÊìáÊ™îÊ°à„ÄçÊåâÈàï</p>
                                <small class="text-info">ÊîØÊè¥Â§öÊ™îÊ°àÂêåÊôÇ‰∏äÂÇ≥ÔºàJPG„ÄÅPNG„ÄÅWebPÔºâ</small>
                            </div>
                        </div>

                        <!-- ÂúñÁâáÁ∂≤Ê†º -->
                        <div id="imageGrid" class="image-grid">
                            <!-- ÂúñÁâáÂ∞áÂãïÊÖãËºâÂÖ•Âà∞ÈÄôË£° -->
                        </div>

                        <!-- ÁãÄÊÖãË≥áË®ä -->
                        <div class="row mt-3">
                            <div class="col-md-4">
                                <div class="card text-center">
                                    <div class="card-body">
                                        <h5 class="card-title" id="totalImages">0</h5>
                                        <p class="card-text">Á∏ΩÂúñÁâáÊï∏</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card text-center">
                                    <div class="card-body">
                                        <h5 class="card-title" id="selectedCount">0</h5>
                                        <p class="card-text">Â∑≤ÈÅ∏Êìá</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card text-center">
                                    <div class="card-body">
                                        <h5 class="card-title" id="loadingStatus">Â∞±Á∑í</h5>
                                        <p class="card-text">ÁãÄÊÖã</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- ‰ΩøÁî®Ë™™Êòé -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-header bg-info text-white">
                        <h3 class="mb-0">
                            <i class="fas fa-question-circle me-2"></i>‰ΩøÁî®ÊñπÂºè
                        </h3>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h5 class="text-primary">
                                    <i class="fas fa-magic me-2"></i>Êô∫ËÉΩÂäüËÉΩ
                                </h5>
                                <ul class="list-unstyled">
                                    <li><i class="fas fa-arrows-alt text-info me-2"></i>ÊãñÊãΩË™øÊï¥È†ÜÂ∫è</li>
                                    <li><i class="fas fa-star text-warning me-2"></i>ÈªûÊìäÊòüËôüË®≠ÂÆö‰∏ªÂúñ</li>
                                    <li><i class="fas fa-file-upload text-success me-2"></i>ÊãñÊîæÊ™îÊ°à‰∏äÂÇ≥</li>
                                    <li><i class="fas fa-eye text-primary me-2"></i>Âç≥ÊôÇÈ†êË¶Ω</li>
                                </ul>
                            </div>
                            <div class="col-md-6">
                                <h5 class="text-success">
                                    <i class="fas fa-cogs me-2"></i>ÁãÄÊÖãË™™Êòé
                                </h5>
                                <ul class="list-unstyled">
                                    <li><span class="badge bg-success me-2">Â∑≤‰∏äÂÇ≥</span>Â∑≤ÂÑ≤Â≠òÂà∞Á≥ªÁµ±</li>
                                    <li><span class="badge bg-info me-2">ÂæÖ‰∏äÂÇ≥</span>Â∞öÊú™ÂÑ≤Â≠ò</li>
                                    <li><span class="badge bg-warning me-2">‚òÖ</span>‰∏ªÂúñÊ®ôË®ò</li>
                                    <li><span class="badge bg-secondary me-2">#1</span>ÊéíÂ∫èÁ∑®Ëôü</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// ÂãïÊÖãÊõ¥Êñ∞ Tag Helper ÁöÑ JavaScript
function updateImageManager() {
    const entityType = document.getElementById('entityTypeSelect').value;
    const entityId = document.getElementById('entityIdInput').value;
    const category = document.getElementById('categorySelect').value;
    
    const container = document.getElementById('imageManagerContainer');
    container.innerHTML = `<zh-image-manager entity-type="${getEntityTypeName(entityType)}" entity-id="${entityId}" category="${getCategoryName(category)}" max-count="15"></zh-image-manager>`;
    
    // ÈáçÊñ∞ÂàùÂßãÂåñ Tag Helper ÁµÑ‰ª∂
    if (window.ZhImageManager) {
        const newElement = container.querySelector('.zh-image-manager');
        if (newElement) {
            new window.ZhImageManager(newElement);
        }
    }
}

function getEntityTypeName(value) {
    const types = { '1': 'Property', '2': 'Member', '3': 'Furniture', '4': 'Announcement' };
    return types[value] || 'Property';
}

function getCategoryName(value) {
    const categories = { '1': 'Gallery', '2': 'Avatar', '3': 'Product' };
    return categories[value] || 'Gallery';
}

// API Ê∏¨Ë©¶ÂäüËÉΩ
const demoConfig = {
    entityType: 1,
    entityId: 2006,
    category: 0,
    apiBase: '/api/ImageManagerApi'
};

let currentImages = [];
let selectedImages = new Set();
let isLoading = false;
let isBatchMode = false;

// ÈÖçÁΩÆÊõ¥Êñ∞ÂáΩÊï∏
function updateConfig() {
    demoConfig.entityType = parseInt(document.getElementById('customEntityTypeSelect').value);
    demoConfig.entityId = parseInt(document.getElementById('customEntityIdInput').value);
    demoConfig.category = parseInt(document.getElementById('customCategorySelect').value);
    updateStatusCards();
}

// ÁãÄÊÖãÂç°ÁâáÊõ¥Êñ∞
function updateStatusCards() {
    document.getElementById('totalImages').textContent = currentImages.length;
    document.getElementById('selectedCount').textContent = selectedImages.size;
    document.getElementById('loadingStatus').textContent = isLoading ? 'ËºâÂÖ•‰∏≠...' : 'Â∞±Á∑í';
}

// ÊåâÈàïÁãÄÊÖãÊõ¥Êñ∞
function updateButtonStates() {
    const deleteBtn = document.getElementById('deleteSelectedBtn');
    if (deleteBtn) {
        deleteBtn.disabled = selectedImages.size === 0;
    }
}
                            <div class="tab-pane fade show active" id="vanilla-js" role="tabpanel">
                                <div class="code-example">
                                    <h5>Á¥î JavaScript ÂØ¶‰Ωú</h5>
                                    <pre><code>class ImageManager {
    constructor(containerId, options = {}) {
        this.container = document.getElementById(containerId);
        this.options = {
            entityType: options.entityType || 1,
            entityId: options.entityId || 7777,
            category: options.category || 3,
            apiBase: '/api/ImageManagerApi'
        };
        this.images = [];
        this.selectedImages = new Set();
        
        this.init();
    }
    
    async init() {
        await this.loadImages();
        this.updateUI();
    }
    
    async loadImages() {
        try {
            const response = await fetch(
                `${this.options.apiBase}/List?` +
                `entityType=${this.options.entityType}&` +
                `entityId=${this.options.entityId}&` +
                `category=${this.options.category}`
            );
            
            if (response.ok) {
                const data = await response.json();
                this.images = data.data || [];
            }
        } catch (error) {
            console.error('ËºâÂÖ•ÂúñÁâáÂ§±Êïó:', error);
        }
    }
    
    async uploadFiles(files) {
        const formData = new FormData();
        formData.append('EntityType', this.options.entityType);
        formData.append('EntityId', this.options.entityId);
        formData.append('Category', this.options.category);
        
        Array.from(files).forEach(file => {
            formData.append('Files', file);
        });
        
        try {
            const response = await fetch(`${this.options.apiBase}/Upload`, {
                method: 'POST',
                body: formData
            });
            
            if (response.ok) {
                await this.loadImages();
                this.updateUI();
                return true;
            }
        } catch (error) {
            console.error('‰∏äÂÇ≥Â§±Êïó:', error);
        }
        return false;
    }
    
    async deleteImage(imageId) {
        try {
            const response = await fetch(`${this.options.apiBase}/Delete/${imageId}`, {
                method: 'DELETE'
            });
            
            if (response.ok) {
                await this.loadImages();
                this.updateUI();
                return true;
            }
        } catch (error) {
            console.error('Âà™Èô§Â§±Êïó:', error);
        }
        return false;
    }
}</code></pre>
                                </div>
                            </div>
                            
                            <div class="tab-pane fade" id="react" role="tabpanel">
                                <div class="code-example">
                                    <h5>React Hook ÁØÑ‰æã</h5>
                                    <pre><code>import React, { useState, useEffect } from 'react';

const useImageManager = (entityType, entityId, category) => {
    const [images, setImages] = useState([]);
    const [loading, setLoading] = useState(false);
    const [selectedImages, setSelectedImages] = useState(new Set());
    
    const loadImages = async () => {
        setLoading(true);
        try {
            const response = await fetch(
                `/api/ImageManagerApi/list?entityType=${entityType}&entityId=${entityId}&category=${category}`
            );
            const data = await response.json();
            setImages(data.data || []);
        } catch (error) {
            console.error('ËºâÂÖ•ÂúñÁâáÂ§±Êïó:', error);
        } finally {
            setLoading(false);
        }
    };
    
    const uploadFiles = async (files) => {
        const formData = new FormData();
        formData.append('EntityType', entityType);
        formData.append('EntityId', entityId);
        formData.append('Category', category);
        
        Array.from(files).forEach(file => {
            formData.append('Files', file);
        });
        
        try {
            setLoading(true);
            const response = await fetch('/api/ImageManagerApi/upload', {
                method: 'POST',
                body: formData
            });
            
            if (response.ok) {
                await loadImages();
            }
        } catch (error) {
            console.error('‰∏äÂÇ≥Â§±Êïó:', error);
        } finally {
            setLoading(false);
        }
    };
    
    useEffect(() => {
        loadImages();
    }, [entityType, entityId, category]);
    
    return {
        images,
        loading,
        selectedImages,
        setSelectedImages,
        uploadFiles,
        loadImages
    };
};

// ‰ΩøÁî®ÁØÑ‰æã
const ImageManagerComponent = () => {
    const { images, loading, uploadFiles } = useImageManager(1, 7777, 3);
    
    const handleFileUpload = (event) => {
        const files = event.target.files;
        if (files.length > 0) {
            uploadFiles(files);
        }
    };
    
    return (
        &lt;div&gt;
            &lt;input type="file" multiple onChange={handleFileUpload} /&gt;
            {loading && &lt;div&gt;ËºâÂÖ•‰∏≠...&lt;/div&gt;}
            &lt;div className="image-grid"&gt;
                {images.map(image => (
                    &lt;img key={image.imageId} src={image.thumbnailUrl} alt="" /&gt;
                ))}
            &lt;/div&gt;
        &lt;/div&gt;
    );
};</code></pre>
                                </div>
                            </div>
                            
                            <div class="tab-pane fade" id="vue" role="tabpanel">
                                <div class="code-example">
                                    <h5>Vue 3 Composition API ÁØÑ‰æã</h5>
                                    <pre><code>&lt;template&gt;
  &lt;div class="image-manager"&gt;
    &lt;div class="toolbar"&gt;
      &lt;input 
        type="file" 
        multiple 
        @@change="handleFileUpload" 
        ref="fileInput"
      /&gt;
      &lt;button @@click="loadImages" :disabled="loading"&gt;
        ÈáçÊñ∞ËºâÂÖ•
      &lt;/button&gt;
    &lt;/div&gt;
    
    &lt;div v-if="loading" class="loading"&gt;ËºâÂÖ•‰∏≠...&lt;/div&gt;
    
    &lt;div class="image-grid"&gt;
      &lt;div 
        v-for="image in images" 
        :key="image.imageId"
        class="image-item"
        :class="{ selected: selectedImages.has(image.imageId) }"
        @@click="toggleSelection(image.imageId)"
      &gt;
        &lt;img :src="image.thumbnailUrl" :alt="image.originalFileName" /&gt;
        &lt;button @@click.stop="deleteImage(image.imageId)"&gt;Âà™Èô§&lt;/button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script setup&gt;
import { ref, reactive, onMounted } from 'vue';

const props = defineProps({
  entityType: { type: Number, default: 1 },
  entityId: { type: Number, required: true },
  category: { type: Number, default: 3 }
});

const images = ref([]);
const loading = ref(false);
const selectedImages = reactive(new Set());
const fileInput = ref(null);

const loadImages = async () => {
  loading.value = true;
  try {
    const response = await fetch(
      `/api/ImageManagerApi/List?entityType=${props.entityType}&entityId=${props.entityId}&category=${props.category}`
    );
    const data = await response.json();
    images.value = data.data || [];
  } catch (error) {
    console.error('ËºâÂÖ•ÂúñÁâáÂ§±Êïó:', error);
  } finally {
    loading.value = false;
  }
};

const uploadFiles = async (files) => {
  const formData = new FormData();
  formData.append('EntityType', props.entityType);
  formData.append('EntityId', props.entityId);
  formData.append('Category', props.category);
  
  Array.from(files).forEach(file => {
    formData.append('Files', file);
  });
  
  try {
    loading.value = true;
    const response = await fetch('/api/ImageManagerApi/Upload', {
      method: 'POST',
      body: formData
    });
    
    if (response.ok) {
      await loadImages();
    }
  } catch (error) {
    console.error('‰∏äÂÇ≥Â§±Êïó:', error);
  } finally {
    loading.value = false;
  }
};

const handleFileUpload = (event) => {
  const files = event.target.files;
  if (files.length > 0) {
    uploadFiles(files);
  }
};

onMounted(() => {
  loadImages();
});
&lt;/script&gt;</code></pre>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Â∞éËà™ÊåâÈàï -->
        <div class="row mt-5">
            <div class="col-12 text-center">
                <div class="btn-group" role="group">
                    <a href="@Url.Action("Mixed")" class="btn btn-outline-secondary btn-lg">
                        <i class="fas fa-arrow-left me-2"></i>‰∏ä‰∏ÄÂÄãÔºöÊ∑∑ÂêàÊñπÂºè
                    </a>
                    <a href="@Url.Action("Index")" class="btn btn-outline-secondary btn-lg">
                        <i class="fas fa-home me-2"></i>ÂõûÂà∞È¶ñÈ†Å
                    </a>
                    <a href="@Url.Action("Comparison")" class="btn btn-dark btn-lg">
                        ÊØîËºÉÂàÜÊûê
                        <i class="fas fa-arrow-right ms-2"></i>
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Bootstrap Modal ÂÖÉ‰ª∂ -->
<!-- Á¢∫Ë™çÂ∞çË©±Ê°Ü Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmModalLabel">Á¢∫Ë™çÊìç‰Ωú</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="confirmModalBody">
                Á¢∫ÂÆöË¶ÅÂü∑Ë°åÊ≠§Êìç‰ΩúÂóéÔºü
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ÂèñÊ∂à</button>
                <button type="button" class="btn btn-primary" id="confirmModalAction">Á¢∫ÂÆö</button>
            </div>
        </div>
    </div>
</div>

<!-- Ë≠¶Âëä/ÈÄöÁü• Modal -->
<div class="modal fade" id="alertModal" tabindex="-1" aria-labelledby="alertModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="alertModalLabel">ÈÄöÁü•</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="alertModalBody">
                ÈÄôÊòØ‰∏ÄÂÄãÈÄöÁü•Ë®äÊÅØ„ÄÇ
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Á¢∫ÂÆö</button>
            </div>
        </div>
    </div>
</div>

<style>
.demo-page {
    min-height: 100vh;
    background: #f8f9fa;
}

.demo-header {
    padding: 2rem 0;
}

.architecture-flow {
    text-align: center;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 0.5rem;
    margin: 1rem 0;
}

.flow-step {
    margin: 0.5rem 0;
}

.flow-arrow {
    font-size: 1.2rem;
    margin: 0.25rem 0;
}

.api-endpoints {
    background: #f8f9fa;
    padding: 1rem;
    border-radius: 0.5rem;
}

.endpoint-item {
    display: flex;
    align-items: center;
    margin: 0.5rem 0;
    padding: 0.5rem;
    background: white;
    border-radius: 0.25rem;
    border-left: 3px solid #007bff;
}

.method {
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    font-weight: bold;
    margin-right: 0.5rem;
    min-width: 60px;
    text-align: center;
}

.method-get { background: #28a745; color: white; }
.method-post { background: #007bff; color: white; }
.method-put { background: #ffc107; color: black; }
.method-delete { background: #dc3545; color: white; }

.framework-badges {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
}

.api-response {
    background: #212529;
    color: #f8f9fa;
    padding: 1rem;
    border-radius: 0.5rem;
    min-height: 150px;
    max-height: 400px;
    overflow-y: auto;
    font-family: 'Monaco', 'Consolas', monospace;
    font-size: 0.875rem;
    white-space: pre-wrap;
}

.manager-status .row {
    gap: 1rem;
}

.status-card {
    padding: 1rem;
    border-radius: 0.5rem;
    text-align: center;
    transition: transform 0.2s ease;
}

.status-card:hover {
    transform: translateY(-2px);
}

.status-value {
    font-size: 2rem;
    font-weight: bold;
    line-height: 1;
}

.status-label {
    font-size: 0.875rem;
    opacity: 0.9;
}

.manager-toolbar {
    border-bottom: 1px solid #dee2e6;
    padding-bottom: 1rem;
}

.drop-zone {
    border: 2px dashed #dee2e6;
    border-radius: 0.5rem;
    padding: 3rem 1rem;
    text-align: center;
    transition: all 0.3s ease;
    background: #fafafa;
}

.drop-zone:hover,
.drop-zone.dragover {
    border-color: #007bff;
    background: #f0f8ff;
}

.drop-zone-content {
    pointer-events: none;
}

.image-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
    padding: 1rem 0;
}

.image-item {
    position: relative;
    background: white;
    border-radius: 0.5rem;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
    cursor: pointer;
}

.image-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

.image-item.selected {
    border: 3px solid #007bff;
    box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
}

.image-item img {
    width: 100%;
    height: 150px;
    object-fit: cover;
}

.image-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0,0,0,0.7);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.image-item:hover .image-overlay {
    opacity: 1;
}

.image-order-badge {
    position: absolute;
    top: 0.5rem;
    left: 0.5rem;
    background: #007bff;
    color: white;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.75rem;
    font-weight: bold;
    z-index: 10;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}

/* SortableJS ÊãñÊõ≥Ê®£Âºè */
.sortable-ghost {
    opacity: 0.5;
    background: #f8f9fa;
    border: 2px dashed #007bff;
}

.sortable-chosen {
    transform: scale(1.05);
    box-shadow: 0 8px 16px rgba(0,0,0,0.2);
}

.sortable-drag {
    transform: rotate(5deg);
    z-index: 9999;
}

.image-grid .image-item {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.code-example {
    background: #f8f9fa;
    padding: 1rem;
    border-radius: 0.5rem;
    border-left: 4px solid #343a40;
}

.code-example pre {
    background: #343a40;
    color: #f8f9fa;
    padding: 1rem;
    border-radius: 0.375rem;
    margin: 0.5rem 0;
    overflow-x: auto;
    max-height: 400px;
}

/* È†êË¶ΩÂäüËÉΩÊ®£Âºè */
.preview-container {
    margin-bottom: 1rem;
    border: 2px solid #28a745;
    border-radius: 0.5rem;
    background: #f8fff8;
    padding: 1rem;
    display: none;
}

.preview-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #28a745;
}

.preview-header h5 {
    margin: 0;
    color: #28a745;
}

.preview-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 1rem;
}

.preview-item {
    position: relative;
    background: white;
    border-radius: 0.5rem;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
    cursor: pointer;
    border: 2px solid transparent;
}

.preview-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

.preview-item.main-image {
    border-color: #ffc107;
    box-shadow: 0 0 0 2px rgba(255,193,7,0.25);
}

.preview-item img {
    width: 100%;
    height: 120px;
    object-fit: cover;
}

.preview-badge {
    position: absolute;
    top: 0.5rem;
    left: 0.5rem;
    background: #28a745;
    color: white;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.75rem;
    font-weight: bold;
    z-index: 10;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}

.preview-item.main-image .preview-badge {
    background: #ffc107;
    color: #000;
}

.preview-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0,0,0,0.7);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.preview-item:hover .preview-overlay {
    opacity: 1;
}

.preview-info {
    padding: 0.5rem;
    background: white;
}

.preview-info small {
    display: block;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@@media (max-width: 768px) {
    .demo-header {
        padding: 1rem 0;
    }
    
    .btn-group {
        flex-direction: column;
        gap: 0.5rem;
    }
    
    .btn-group .btn {
        width: 100%;
    }
    
    .manager-status .row {
        flex-direction: column;
        gap: 0.5rem;
    }
    
    .image-grid {
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    }
    
    .manager-toolbar .btn-group {
        flex-wrap: wrap;
        margin-bottom: 0.5rem;
    }
}
</style>

<!-- SortableJS CDN ÂºïÂÖ• -->
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>

<script>
// ÂÖ®ÂüüËÆäÊï∏
let currentImages = [];        // Â∑≤‰∏äÂÇ≥ÁöÑÂúñÁâáÔºà‰æÜËá™APIÔºâ
let selectedImages = new Set();
let isLoading = false;

// È†êË¶ΩÁõ∏ÈóúËÆäÊï∏
let previewFiles = [];         // ÂæÖ‰∏äÂÇ≥ÁöÑÊ™îÊ°à
let previewImages = [];        // È†êË¶ΩÂúñÁâáË≥áÊñô
let mainImageIndex = 0;        // ‰∏ªÂúñÁ¥¢Âºï

// ÊºîÁ§∫Ë®≠ÂÆö - ÊîØÊè¥ÂãïÊÖãÈÖçÁΩÆ
const demoConfig = {
    entityType: @ViewBag.DefaultEntityType,
    entityId: @ViewBag.DefaultEntityId,
    category: @ViewBag.DefaultCategory,
    skipEntityValidation: false,
    apiBase: '/api/ImageManagerApi'
};

// ÈÖçÁΩÆÊõ¥Êñ∞ÂáΩÊï∏
function updateConfig() {
    const entityTypeSelect = document.getElementById('entityTypeSelect');
    const entityIdInput = document.getElementById('entityIdInput');
    const categorySelect = document.getElementById('categorySelect');
    const skipValidationCheck = document.getElementById('skipValidationCheck');
    
    demoConfig.entityType = parseInt(entityTypeSelect.value);
    demoConfig.entityId = parseInt(entityIdInput.value);
    demoConfig.category = parseInt(categorySelect.value);
    demoConfig.skipEntityValidation = skipValidationCheck.checked;
    
    // Êõ¥Êñ∞È°ØÁ§∫
    updateCurrentTargetDisplay();
    
    // ÈáçÊñ∞ËºâÂÖ•ÂúñÁâá
    loadImages();
}

function updateCurrentTargetDisplay() {
    const entityTypeNames = {
        0: 'Member',
        1: 'Property', 
        2: 'Furniture',
        3: 'Announcement'
    };
    
    const categoryNames = {
        0: 'Gallery',
        1: 'Profile',
        2: 'Thumbnail', 
        3: 'Document'
    };
    
    const entityTypeName = entityTypeNames[demoConfig.entityType] || 'Unknown';
    const categoryName = categoryNames[demoConfig.category] || 'Unknown';
    
    document.getElementById('currentTarget').textContent = 
        `${entityTypeName} ID: ${demoConfig.entityId} (${categoryName})`;
        
    document.getElementById('validationStatus').textContent = 
        demoConfig.skipEntityValidation ? 'Áï•ÈÅéÈ©óË≠â' : 'È©óË≠âÈñãÂïü';
    document.getElementById('validationStatus').className = 
        `badge ${demoConfig.skipEntityValidation ? 'bg-warning' : 'bg-success'} ms-2`;
}

// È†ÅÈù¢ËºâÂÖ•ÂÆåÊàêÂæåÂàùÂßãÂåñ
document.addEventListener('DOMContentLoaded', function() {
    initPureAPIDemo();
});

function initPureAPIDemo() {
    updateCurrentTargetDisplay();
    loadImages();
    initSortable();
    logApiCall('ÂàùÂßãÂåñ', 'Á¥î API Ê®°ÂºèÂ∑≤ÂïüÂãï');
}

// API Ê∏¨Ë©¶ÂáΩÊï∏
async function testGetImages() {
    const url = `${demoConfig.apiBase}/list?entityType=${demoConfig.entityType}&entityId=${demoConfig.entityId}&category=${demoConfig.category}`;
    
    logApiCall('GET', url);
    
    try {
        const response = await fetch(url);
        const data = await response.json();
        
        logApiCall('ÂõûÊáâ', JSON.stringify(data, null, 2));
        
        if (data.Success) {
            currentImages = data.Data?.Images || [];
            updateImageGrid();
            updateStatusCards();
        }
    } catch (error) {
        logApiCall('ÈåØË™§', error.message);
    }
}

async function testUploadImages() {
    const fileInput = document.getElementById('apiTestFiles');
    const files = fileInput.files;
    
    if (files.length === 0) {
        await showAlert('Ë´ãÂÖàÈÅ∏ÊìáÊ™îÊ°à', 'ÊèêÁ§∫');
        return;
    }
    
    const formData = new FormData();
    formData.append('EntityType', demoConfig.entityType);
    formData.append('EntityId', demoConfig.entityId);
    formData.append('Category', demoConfig.category);
    formData.append('SkipEntityValidation', demoConfig.skipEntityValidation);
    
    Array.from(files).forEach(file => {
        formData.append('Files', file);
    });
    
    const url = `${demoConfig.apiBase}/upload`;
    logApiCall('POST', url);
    logApiCall('FormData', `Ê™îÊ°àÊï∏Èáè: ${files.length}`);
    
    try {
        const response = await fetch(url, {
            method: 'POST',
            body: formData
        });
        
        const data = await response.json();
        logApiCall('ÂõûÊáâ', JSON.stringify(data, null, 2));
        
        if (data.Success) {
            // ÈáçÊñ∞ËºâÂÖ•ÂúñÁâáÊ∏ÖÂñÆ
            await testGetImages();
            fileInput.value = ''; // Ê∏ÖÁ©∫ÈÅ∏Êìá
            await showAlert('‰∏äÂÇ≥ÊàêÂäüÔºÅ', 'ÊàêÂäü');
        } else {
            // È°ØÁ§∫ÂÖ∑È´îÁöÑÈåØË™§Ë®äÊÅØ
            const errorMessage = data.message || '‰∏äÂÇ≥Â§±Êïó';
            const details = data.errors?.length > 0 ? data.errors.join('\n') : '';
            await showAlert(errorMessage + (details ? '\n\nË©≥Á¥∞ÈåØË™§Ôºö\n' + details : ''), 'ÈåØË™§');
        }
    } catch (error) {
        logApiCall('ÈåØË™§', error.message);
        await showAlert('Á∂≤Ë∑ØÈåØË™§Êàñ‰º∫ÊúçÂô®ÁÑ°ÂõûÊáâÔºö' + error.message, 'ÈåØË™§');
    }
}

async function testReorderImages() {
    if (currentImages.length === 0) {
        await showAlert('Ê≤íÊúâÂúñÁâáÂèØ‰ª•ÊéíÂ∫èÔºåË´ãÂÖà‰∏äÂÇ≥‰∏Ä‰∫õÂúñÁâá', 'ÊèêÁ§∫');
        return;
    }
    
    // Èö®Ê©üÈáçÊñ∞ÊéíÂ∫è
    const shuffled = [...currentImages].sort(() => Math.random() - 0.5);
    const reorderData = shuffled.map((img, index) => ({
        imageId: img.ImageId,
        displayOrder: index + 1
    }));
    
    const url = `${demoConfig.apiBase}/reorder`;
    logApiCall('POST', url);
    logApiCall('Ë´ãÊ±ÇË≥áÊñô', JSON.stringify(reorderData, null, 2));
    
    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(reorderData)
        });
        
        const data = await response.json();
        logApiCall('ÂõûÊáâ', JSON.stringify(data, null, 2));
        
        if (data.Success) {
            await testGetImages(); // ÈáçÊñ∞ËºâÂÖ•‰ª•Êü•ÁúãÊñ∞È†ÜÂ∫è
        }
    } catch (error) {
        logApiCall('ÈåØË™§', error.message);
    }
}

function logApiCall(type, content) {
    const responseDiv = document.getElementById('apiResponse');
    if (!responseDiv) return;
    
    const timestamp = new Date().toLocaleTimeString();
    const entry = `[${timestamp}] ${type}:\n${content}\n\n`;
    responseDiv.textContent += entry;
    responseDiv.scrollTop = responseDiv.scrollHeight;
    
    // ‰øùÊåÅÊúÄËøë 50 Ê¢ùË®òÈåÑ
    const lines = responseDiv.textContent.split('\n');
    if (lines.length > 200) {
        responseDiv.textContent = lines.slice(-100).join('\n');
    }
}

// Ëá™Âª∫ÂúñÁâáÁÆ°ÁêÜÂô®ÂäüËÉΩ
async function loadImages() {
    if (isLoading) return;
    
    isLoading = true;
    updateStatusCards();
    
    try {
        const response = await fetch(
            `${demoConfig.apiBase}/List?entityType=${demoConfig.entityType}&entityId=${demoConfig.entityId}&category=${demoConfig.category}`
        );
        
        if (response.ok) {
            const data = await response.json();
            currentImages = data.Data?.Images || [];
            
            // Á¢∫‰øùÂúñÁâáÊåâÁÖß displayOrder ÊéíÂ∫è
            currentImages.sort((a, b) => (a.DisplayOrder || 0) - (b.DisplayOrder || 0));
            
            updateImageGrid();
            
            // Ëá™Âãï‰øÆÊ≠£È†ÜÂ∫èÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºâ
            await normalizeDisplayOrder();
        }
    } catch (error) {
        console.error('ËºâÂÖ•ÂúñÁâáÂ§±Êïó:', error);
    } finally {
        isLoading = false;
        updateStatusCards();
        updateButtonStates();
    }
}

function updateImageGrid() {
    const grid = document.getElementById('imageGrid');
    if (!grid) return;
    
    if (currentImages.length === 0) {
        grid.innerHTML = `
            <div class="col-12 text-center text-muted p-4">
                <i class="fas fa-images fa-3x mb-3"></i>
                <h5>Â∞öÁÑ°ÂúñÁâá</h5>
                <p>Ë´ã‰∏äÂÇ≥‰∏Ä‰∫õÂúñÁâá‰æÜÊ∏¨Ë©¶ÂäüËÉΩ</p>
            </div>
        `;
        return;
    }
    
    grid.innerHTML = currentImages.map((image, index) => `
        <div class="image-item ${selectedImages.has(image.ImageId) ? 'selected' : ''}" 
             data-image-id="${image.ImageId}"
             onclick="toggleImageSelection(${image.ImageId})">
            <div class="image-order-badge">${index + 1}</div>
            <img src="${image.ThumbnailUrl || image.OriginalUrl}" 
                 alt="${image.FileName}" 
                 loading="lazy">
            <div class="image-overlay">
                <div class="btn-group">
                    <button class="btn btn-sm btn-light" onclick="event.stopPropagation(); previewImage('${image.OriginalUrl}')">
                        <i class="fas fa-eye"></i>
                    </button>
                    <button class="btn btn-sm btn-danger" onclick="event.stopPropagation(); deleteImage(${image.ImageId})">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
            <div class="image-info">
                <small class="text-muted">${image.FileName}</small>
            </div>
        </div>
    `).join('');
    
    // ÈáçÊñ∞ÂàùÂßãÂåñ SortableJS (Âõ†ÁÇ∫ DOM Â∑≤Êõ¥Êñ∞)
    initSortable();
}

// SortableJS ÂàùÂßãÂåñÂíåÊéíÂ∫èÂäüËÉΩ
let sortableInstance = null;

function initSortable() {
    const imageGrid = document.getElementById('imageGrid');
    if (!imageGrid) return;
    
    // Â¶ÇÊûúÂ∑≤Á∂ìÊúâ sortable ÂØ¶‰æãÔºåÂÖàÈä∑ÊØÄ
    if (sortableInstance) {
        sortableInstance.destroy();
    }
    
    // Âè™ÊúâÁï∂ÊúâÂúñÁâáÊôÇÊâçÂàùÂßãÂåñÊéíÂ∫è
    if (currentImages.length > 0) {
        sortableInstance = Sortable.create(imageGrid, {
            animation: 150,
            ghostClass: 'sortable-ghost',
            chosenClass: 'sortable-chosen',
            dragClass: 'sortable-drag',
            onEnd: function(evt) {
                // Êõ¥Êñ∞ÂúñÁâáÈ†ÜÂ∫è
                const oldIndex = evt.oldIndex;
                const newIndex = evt.newIndex;
                
                if (oldIndex !== newIndex) {
                    // ÈáçÊñ∞ÊéíÂàó currentImages Èô£Âàó
                    const movedImage = currentImages.splice(oldIndex, 1)[0];
                    currentImages.splice(newIndex, 0, movedImage);
                    
                    // Êõ¥Êñ∞È°ØÁ§∫ÁöÑÈ†ÜÂ∫èËôüÁ¢º
                    updateImageGrid();
                    
                    // ÂëºÂè´ API Êõ¥Êñ∞ÊéíÂ∫è
                    updateImageOrder();
                }
            }
        });
    }
}

async function updateImageOrder() {
    try {
        const orderData = currentImages.map((image, index) => ({
            imageId: image.ImageId,
            displayOrder: index + 1
        }));
        
        const response = await fetch(`${demoConfig.apiBase}/reorder`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(orderData)
        });
        
        if (response.ok) {
            logApiCall('ÊàêÂäü', `ÂúñÁâáÊéíÂ∫èÂ∑≤Êõ¥Êñ∞`);
        } else {
            throw new Error(`ÊéíÂ∫èÊõ¥Êñ∞Â§±Êïó: ${response.statusText}`);
        }
    } catch (error) {
        console.error('Êõ¥Êñ∞ÊéíÂ∫èÂ§±Êïó:', error);
        logApiCall('ÈåØË™§', `ÊéíÂ∫èÊõ¥Êñ∞Â§±Êïó: ${error.message}`);
        // ÈáçÊñ∞ËºâÂÖ•ÂúñÁâá‰ª•ÈÇÑÂéüÊ≠£Á¢∫È†ÜÂ∫è
        await loadImages();
    }
}

// Ëá™Âãï‰øÆÊ≠£È†ÜÂ∫èÈÇèËºØ
async function normalizeDisplayOrder() {
    if (currentImages.length === 0) return;
    
    // Ê™¢Êü•ÊòØÂê¶ÈúÄË¶ÅÈáçÊñ∞ÊéíÂ∫è
    const needsReorder = currentImages.some((image, index) => 
        (image.DisplayOrder || 0) !== (index + 1)
    );
    
    if (needsReorder) {
        console.log('ÂÅµÊ∏¨Âà∞È†ÜÂ∫èÈúÄË¶Å‰øÆÊ≠£ÔºåÊ≠£Âú®Ëá™Âãï‰øÆÊ≠£...');
        
        // Êõ¥Êñ∞Êú¨Âú∞È†ÜÂ∫è
        currentImages.forEach((image, index) => {
            image.DisplayOrder = index + 1;
        });
        
        // ÂêåÊ≠•Âà∞ÂæåÁ´Ø
        await updateImageOrder();
        
        console.log('È†ÜÂ∫è‰øÆÊ≠£ÂÆåÊàê');
    }
}

function updateStatusCards() {
    const total = currentImages.length;
    const uploaded = currentImages.filter(img => img.isUploaded !== false).length;
    const selected = selectedImages.size;
    const loading = isLoading ? 1 : 0;
    
    document.getElementById('totalCount').textContent = total;
    document.getElementById('uploadedCount').textContent = uploaded;
    document.getElementById('selectedCount').textContent = selected;
    document.getElementById('loadingCount').textContent = loading;
}

function updateButtonStates() {
    const uploadBtn = document.getElementById('uploadBtn');
    const deleteBtn = document.getElementById('deleteBtn');
    
    if (uploadBtn) {
        uploadBtn.disabled = isLoading;
    }
    
    if (deleteBtn) {
        deleteBtn.disabled = selectedImages.size === 0 || isLoading;
    }
}

function selectFiles() {
    document.getElementById('fileInput').click();
}

function handleFileSelect(event) {
    const files = event.target.files;
    if (files.length > 0) {
        addFilesToPreview(files);
    }
}

// ‰øùÁïôËàäÁöÑÁõ¥Êé•‰∏äÂÇ≥ÂáΩÊï∏ÔºàÁî®ÊñºÊ∏¨Ë©¶Ôºâ
async function uploadFiles(files) {
    if (isLoading) return;
    
    const formData = new FormData();
    formData.append('EntityType', demoConfig.entityType);
    formData.append('EntityId', demoConfig.entityId);
    formData.append('Category', demoConfig.category);
    formData.append('SkipEntityValidation', demoConfig.skipEntityValidation);
    
    Array.from(files).forEach(file => {
        formData.append('Files', file);
    });
    
    isLoading = true;
    updateStatusCards();
    
    try {
        const response = await fetch(`${demoConfig.apiBase}/upload`, {
            method: 'POST',
            body: formData
        });
        
        if (response.ok) {
            const data = await response.json();
            if (data.Success) {
                await loadImages();
                document.getElementById('fileInput').value = '';
                logApiCall('‰∏äÂÇ≥ÊàêÂäü', `ÊàêÂäü‰∏äÂÇ≥ ${files.length} ÂÄãÊ™îÊ°à`);
                await showAlert('‰∏äÂÇ≥ÊàêÂäüÔºÅ', 'ÊàêÂäü');
            } else {
                const errorMessage = data.Message || '‰∏äÂÇ≥Â§±Êïó';
                const details = data.Errors?.length > 0 ? data.Errors.join('\n') : '';
                logApiCall('‰∏äÂÇ≥Â§±Êïó', errorMessage + (details ? '\nË©≥Á¥∞Ôºö' + details : ''));
                await showAlert(errorMessage + (details ? '\n\nË©≥Á¥∞ÈåØË™§Ôºö\n' + details : ''), 'ÈåØË™§');
            }
        } else {
            const errorText = await response.text();
            logApiCall('HTTP ÈåØË™§', `${response.status}: ${errorText}`);
            await showAlert(`‰∏äÂÇ≥Â§±Êïó (${response.status}): ${errorText}`, 'ÈåØË™§');
        }
    } catch (error) {
        console.error('‰∏äÂÇ≥Â§±Êïó:', error);
        await showAlert('‰∏äÂÇ≥Â§±Êïó: ' + error.message, 'ÈåØË™§');
    } finally {
        isLoading = false;
        updateStatusCards();
        updateButtonStates();
    }
}

function toggleImageSelection(imageId) {
    if (selectedImages.has(imageId)) {
        selectedImages.delete(imageId);
    } else {
        selectedImages.add(imageId);
    }
    
    updateImageGrid();
    updateStatusCards();
    updateButtonStates();
}

function selectAll() {
    selectedImages.clear();
    currentImages.forEach(img => selectedImages.add(img.ImageId));
    updateImageGrid();
    updateStatusCards();
    updateButtonStates();
}

function selectNone() {
    selectedImages.clear();
    updateImageGrid();
    updateStatusCards();
    updateButtonStates();
}

async function deleteSelected() {
    if (selectedImages.size === 0) return;
    
    const confirmed = await showConfirm(`Á¢∫ÂÆöË¶ÅÂà™Èô§ ${selectedImages.size} ÂºµÂúñÁâáÂóéÔºü`, 'Âà™Èô§Á¢∫Ë™ç');
    if (!confirmed) {
        return;
    }
    
    isLoading = true;
    updateStatusCards();
    
    try {
        const deletePromises = Array.from(selectedImages).map(imageId =>
            fetch(`${demoConfig.apiBase}/Delete/${imageId}`, { method: 'DELETE' })
        );
        
        await Promise.all(deletePromises);
        selectedImages.clear();
        await loadImages();
    } catch (error) {
        console.error('Âà™Èô§Â§±Êïó:', error);
        await showAlert('Âà™Èô§Â§±Êïó: ' + error.message, 'ÈåØË™§');
    } finally {
        isLoading = false;
        updateStatusCards();
        updateButtonStates();
    }
}

async function deleteImage(imageId) {
    const confirmed = await showConfirm('Á¢∫ÂÆöË¶ÅÂà™Èô§ÈÄôÂºµÂúñÁâáÂóéÔºü', 'Âà™Èô§Á¢∫Ë™ç');
    if (!confirmed) {
        return;
    }
    
    try {
        const response = await fetch(`${demoConfig.apiBase}/Delete/${imageId}`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            selectedImages.delete(imageId);
            await loadImages();
        } else {
            await showAlert('Âà™Èô§Â§±Êïó', 'ÈåØË™§');
        }
    } catch (error) {
        console.error('Âà™Èô§Â§±Êïó:', error);
        await showAlert('Âà™Èô§Â§±Êïó: ' + error.message, 'ÈåØË™§');
    }
}

async function shuffleImages() {
    if (currentImages.length === 0) {
        await showAlert('Ê≤íÊúâÂúñÁâáÂèØ‰ª•ÊéíÂ∫è', 'ÊèêÁ§∫');
        return;
    }
    
    // Èö®Ê©üÈáçÊñ∞ÊéíÂ∫è currentImages Èô£Âàó
    currentImages.sort(() => Math.random() - 0.5);
    
    // Êõ¥Êñ∞È°ØÁ§∫
    updateImageGrid();
    
    // ÂëºÂè´ API Êõ¥Êñ∞ÊéíÂ∫è
    updateImageOrder();
}

function refreshImages() {
    loadImages();
}

function previewImage(imagePath) {
    // Á∞°ÂñÆÁöÑÂúñÁâáÈ†êË¶Ω
    const modal = document.createElement('div');
    modal.style.cssText = `
        position: fixed; top: 0; left: 0; width: 100%; height: 100%;
        background: rgba(0,0,0,0.8); z-index: 9999; display: flex;
        align-items: center; justify-content: center; cursor: pointer;
    `;
    
    const img = document.createElement('img');
    img.src = imagePath;
    img.style.cssText = 'max-width: 90%; max-height: 90%; object-fit: contain;';
    
    modal.appendChild(img);
    modal.onclick = () => document.body.removeChild(modal);
    document.body.appendChild(modal);
}

// ÊãñÊãΩÂäüËÉΩ - Âä†Âº∑‰∫ã‰ª∂ËôïÁêÜ
function handleDragOver(event) {
    event.preventDefault();
    event.stopPropagation();
    event.currentTarget.classList.add('dragover');
}

function handleDragLeave(event) {
    event.preventDefault();
    event.stopPropagation();
    event.currentTarget.classList.remove('dragover');
}

function handleDrop(event) {
    event.preventDefault();
    event.stopPropagation();
    event.currentTarget.classList.remove('dragover');
    
    const files = event.dataTransfer.files;
    if (files.length > 0) {
        console.log('ÊãñÊõ≥Ê™îÊ°àÊï∏Èáè:', files.length);
        addFilesToPreview(files);
    }
}

// ÊîπÈÄ≤ÁöÑÊãñÊõ≥‰∫ã‰ª∂ËôïÁêÜ - ÈÅøÂÖçË°ùÁ™Å
document.addEventListener('DOMContentLoaded', function() {
    // Âè™ÈòªÊ≠¢ body Â±§Á¥öÁöÑÊãñÊõ≥Ôºå‰∏çÂΩ±ÈüøÊãñÊõ≥ÂçÄÂüü
    document.body.addEventListener('dragover', function(e) {
        if (!e.target.closest('#dropZone')) {
            e.preventDefault();
        }
    });
    
    document.body.addEventListener('drop', function(e) {
        if (!e.target.closest('#dropZone')) {
            e.preventDefault();
        }
    });
    
    console.log('Á¥î API Ê®°ÂºèÊãñÊõ≥Èò≤Ë≠∑Â∑≤ÂïüÁî®ÔºàÊîπÈÄ≤ÁâàÔºâ');
});

function uploadSelected() {
    if (previewImages.length > 0) {
        confirmUploadPreviews();
    } else {
        selectFiles();
    }
}

// === È†êË¶ΩÂäüËÉΩ ===
function addFilesToPreview(files) {
    previewFiles = Array.from(files);
    previewImages = [];
    
    Array.from(files).forEach((file, index) => {
        if (file.type.startsWith('image/')) {
            const reader = new FileReader();
            reader.onload = function(e) {
                previewImages.push({
                    file: file,
                    url: e.target.result,
                    fileName: file.name,
                    size: file.size,
                    isMain: index === mainImageIndex,
                    isUploaded: false
                });
                
                if (previewImages.length === previewFiles.length) {
                    renderPreview();
                }
            };
            reader.readAsDataURL(file);
        }
    });
}

function renderPreview() {
    const previewContainer = document.querySelector('.preview-container');
    const imageGrid = document.getElementById('imageGrid');
    
    if (!previewContainer) {
        // Âª∫Á´ãÈ†êË¶ΩÂÆπÂô®
        const newPreviewContainer = document.createElement('div');
        newPreviewContainer.className = 'preview-container';
        newPreviewContainer.innerHTML = `
            <div class="preview-header">
                <h5><i class="fas fa-eye me-2"></i>ÂæÖ‰∏äÂÇ≥È†êË¶Ω (${previewImages.length} Âºµ)</h5>
                <div class="btn-group">
                    <button class="btn btn-success btn-sm" onclick="confirmUploadPreviews()">
                        <i class="fas fa-upload me-1"></i>Á¢∫Ë™ç‰∏äÂÇ≥
                    </button>
                    <button class="btn btn-secondary btn-sm" onclick="clearPreview()">
                        <i class="fas fa-times me-1"></i>ÂèñÊ∂à
                    </button>
                </div>
            </div>
            <div class="preview-grid" id="previewGrid"></div>
        `;
        imageGrid.parentNode.insertBefore(newPreviewContainer, imageGrid);
    }
    
    // È°ØÁ§∫È†êË¶Ω
    const container = document.querySelector('.preview-container');
    const grid = document.getElementById('previewGrid');
    
    if (previewImages.length > 0) {
        container.style.display = 'block';
        grid.innerHTML = previewImages.map((image, index) => `
            <div class="preview-item ${image.isMain ? 'main-image' : ''}" 
                 onclick="setMainImage(${index})">
                <div class="preview-badge">${image.isMain ? '‚òÖ' : index + 1}</div>
                <img src="${image.url}" alt="${image.fileName}">
                <div class="preview-overlay">
                    <div class="btn-group">
                        <button class="btn btn-sm btn-warning" onclick="event.stopPropagation(); setMainImage(${index})">
                            <i class="fas fa-star"></i>
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="event.stopPropagation(); removePreviewImage(${index})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
                <div class="preview-info">
                    <small class="text-muted">${image.fileName}</small>
                    <small class="text-info d-block">${(image.size / 1024).toFixed(1)} KB</small>
                </div>
            </div>
        `).join('');
    } else {
        container.style.display = 'none';
    }
    
    updateStatusCards();
}

function setMainImage(index) {
    previewImages.forEach((img, i) => {
        img.isMain = (i === index);
    });
    mainImageIndex = index;
    renderPreview();
}

function removePreviewImage(index) {
    previewImages.splice(index, 1);
    previewFiles.splice(index, 1);
    
    if (mainImageIndex >= index && mainImageIndex > 0) {
        mainImageIndex--;
    }
    
    if (previewImages.length > 0 && mainImageIndex >= previewImages.length) {
        mainImageIndex = previewImages.length - 1;
    }
    
    // Êõ¥Êñ∞‰∏ªÂúñÊ®ôË®ò
    if (previewImages.length > 0) {
        previewImages.forEach((img, i) => {
            img.isMain = (i === mainImageIndex);
        });
    }
    
    renderPreview();
}

function clearPreview() {
    previewFiles = [];
    previewImages = [];
    mainImageIndex = 0;
    
    const container = document.querySelector('.preview-container');
    if (container) {
        container.style.display = 'none';
    }
    
    // Ê∏ÖÁ©∫Ê™îÊ°àËº∏ÂÖ•
    const fileInput = document.getElementById('fileInput');
    if (fileInput) {
        fileInput.value = '';
    }
    
    updateStatusCards();
}

async function confirmUploadPreviews() {
    if (previewFiles.length === 0) {
        await showAlert('Ê≤íÊúâÊ™îÊ°àÂèØ‰ª•‰∏äÂÇ≥', 'ÊèêÁ§∫');
        return;
    }
    
    // ‰ΩøÁî®ÁèæÊúâÁöÑ‰∏äÂÇ≥ÂäüËÉΩ
    await uploadFiles(previewFiles);
    
    // Ê∏ÖÁ©∫È†êË¶Ω
    clearPreview();
}

// ÁãÄÊÖãÊõ¥Êñ∞ÂáΩÊï∏Ë£úÂÆå
function updateStatusCards() {
    const totalElement = document.getElementById('totalImages');
    const selectedElement = document.getElementById('selectedCount');
    const loadingElement = document.getElementById('loadingStatus');
    
    if (totalElement) {
        totalElement.textContent = currentImages.length + (previewImages.length || 0);
    }
    
    if (selectedElement) {
        selectedElement.textContent = selectedImages.size;
    }
    
    if (loadingElement) {
        loadingElement.textContent = isLoading ? 'ËºâÂÖ•‰∏≠...' : 'Â∞±Á∑í';
    }
}

// ÊâπÈáèÊìç‰ΩúÂäüËÉΩ
let isBatchMode = false;

function toggleBatchMode() {
    isBatchMode = !isBatchMode;
    const toggleBtn = document.querySelector('button[onclick="toggleBatchMode()"]');
    const deleteBtn = document.getElementById('deleteSelectedBtn');
    
    if (toggleBtn) {
        toggleBtn.innerHTML = isBatchMode 
            ? '<i class="fas fa-check-square me-1"></i>ÈÄÄÂá∫ÊâπÈáè'
            : '<i class="fas fa-check-square me-1"></i>ÊâπÈáèÊìç‰Ωú';
        toggleBtn.className = isBatchMode ? 'btn btn-secondary me-2' : 'btn btn-warning me-2';
    }
    
    if (deleteBtn) {
        deleteBtn.style.display = isBatchMode ? 'inline-block' : 'none';
    }
    
    if (!isBatchMode) {
        selectedImages.clear();
        updateImageGrid();
        updateStatusCards();
    }
}

function deleteSelectedImages() {
    if (selectedImages.size === 0) {
        showAlert('Ë´ãÂÖàÈÅ∏ÊìáË¶ÅÂà™Èô§ÁöÑÂúñÁâá', 'ÊèêÁ§∫');
        return;
    }
    
    deleteSelected();
}

// Modal Â∞çË©±Ê°ÜÂäüËÉΩ
function showAlert(message, title = 'ÊèêÁ§∫') {
    return new Promise((resolve) => {
        const modal = document.getElementById('alertModal');
        const titleElement = document.getElementById('alertModalLabel');
        const bodyElement = document.getElementById('alertModalBody');
        
        if (titleElement) titleElement.textContent = title;
        if (bodyElement) bodyElement.textContent = message;
        
        const bootstrapModal = new bootstrap.Modal(modal);
        bootstrapModal.show();
        
        modal.addEventListener('hidden.bs.modal', () => resolve(), { once: true });
    });
}

function showConfirm(message, title = 'Á¢∫Ë™ç') {
    return new Promise((resolve) => {
        const modal = document.getElementById('confirmModal');
        const titleElement = document.getElementById('confirmModalLabel');
        const bodyElement = document.getElementById('confirmModalBody');
        const actionBtn = document.getElementById('confirmModalAction');
        
        if (titleElement) titleElement.textContent = title;
        if (bodyElement) bodyElement.textContent = message;
        
        const bootstrapModal = new bootstrap.Modal(modal);
        bootstrapModal.show();
        
        let resolved = false;
        
        const handleConfirm = () => {
            if (!resolved) {
                resolved = true;
                resolve(true);
                bootstrapModal.hide();
            }
        };
        
        const handleCancel = () => {
            if (!resolved) {
                resolved = true;
                resolve(false);
                bootstrapModal.hide();
            }
        };
        
        actionBtn.onclick = handleConfirm;
        modal.addEventListener('hidden.bs.modal', handleCancel, { once: true });
    });
}

// È†êË¶ΩÊéíÂ∫èÂäüËÉΩ
function initPreviewSortable() {
    const previewGrid = document.getElementById('previewGrid');
    if (!previewGrid || previewImages.length === 0) return;
    
    new Sortable(previewGrid, {
        animation: 150,
        ghostClass: 'sortable-ghost',
        chosenClass: 'sortable-chosen',
        onEnd: function(evt) {
            // ÈáçÊñ∞ÊéíÂàóÈ†êË¶ΩÂúñÁâáÈô£Âàó
            const movedItem = previewImages.splice(evt.oldIndex, 1)[0];
            previewImages.splice(evt.newIndex, 0, movedItem);
            
            const movedFile = previewFiles.splice(evt.oldIndex, 1)[0];
            previewFiles.splice(evt.newIndex, 0, movedFile);
            
            updatePreviewDisplay();
        }
    });
}

function clearPreviews() {
    previewImages = [];
    previewFiles = [];
    
    const container = document.getElementById('previewContainer');
    if (container) {
        container.style.display = 'none';
    }
    
    // Ê∏ÖÁ©∫Ê™îÊ°àËº∏ÂÖ•
    document.getElementById('fileInput').value = '';
    updateStatusCards();
}

function removeFromPreview(index) {
    previewImages.splice(index, 1);
    previewFiles.splice(index, 1);
    
    // Â¶ÇÊûúÂà™Èô§ÁöÑÊòØ‰∏ªÂúñ‰∏îÈÇÑÊúâÂÖ∂‰ªñÂúñÁâáÔºåË®≠ÂÆöÁ¨¨‰∏ÄÂºµÁÇ∫‰∏ªÂúñ
    if (previewImages.length > 0 && !previewImages.some(img => img.isMainImage)) {
        previewImages[0].isMainImage = true;
    }
    
    updatePreviewDisplay();
    updateStatusCards();
}
        }, { once: true });
        
        modal.show();
    });
}

function showAlert(message, title = 'ÈÄöÁü•') {
    return new Promise((resolve) => {
        const modal = new bootstrap.Modal(document.getElementById('alertModal'));
        document.getElementById('alertModalLabel').textContent = title;
        document.getElementById('alertModalBody').textContent = message;
        
        // Áõ£ËÅΩÈóúÈñâ
        const modalElement = document.getElementById('alertModal');
        modalElement.addEventListener('hidden.bs.modal', () => {
            resolve();
        }, { once: true });
        
        modal.show();
    });
}
</script>