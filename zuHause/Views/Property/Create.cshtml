@using zuHause.ViewModels
@using zuHause.Enums
@model PropertyCreateViewModel
@{
    ViewData["Title"] = ViewBag.PageTitle ?? "房源管理";
    Layout = null; // 使用自定義佈局
    var isEditMode = Model.IsEditMode;
    var formAction = ViewBag.FormAction ?? "Create";
    var propertyId = Model.PropertyId;
}

<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - zuHause</title>
    
    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <!-- Variables CSS -->
    <link rel="stylesheet" href="~/css/variables.css" />
    <!-- Property Detail CSS for consistent styling -->
    <link rel="stylesheet" href="~/css/property-detail.css" />
    <!-- Custom Property Creation styles -->
    <style>
        /* 表單容器樣式 */
        .property-create-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem 1rem;
        }
        
        .form-section {
            background: white;
            border-radius: 0.75rem;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 2rem;
            margin-bottom: 2rem;
        }
        
        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 1.5rem;
            padding-bottom: 0.5rem;
            border-bottom: 3px solid #3498db;
        }
        
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        .form-label {
            font-weight: 600;
            color: #34495e;
            margin-bottom: 0.5rem;
        }
        
        .required::after {
            content: " *";
            color: #e74c3c;
        }
        
        .form-control:focus {
            border-color: #3498db;
            box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.25);
        }
        
        .input-group-text {
            background-color: #f8f9fa;
            border-color: #dee2e6;
        }
        
        /* 圖片上傳區域 */
        .image-upload-area {
            border: 2px dashed #dee2e6;
            border-radius: 0.5rem;
            padding: 3rem 2rem;
            text-align: center;
            background-color: #f8f9fa;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .image-upload-area:hover {
            border-color: #3498db;
            background-color: #f1f8ff;
        }
        
        .image-upload-area.dragover {
            border-color: #2980b9;
            background-color: #e8f4fd;
        }
        
        .upload-icon {
            font-size: 3rem;
            color: #bdc3c7;
            margin-bottom: 1rem;
        }
        
        /* PDF 文件上傳區域 */
        .document-upload-area {
            border: 2px dashed #ffc1cc;
            border-radius: 0.5rem;
            padding: 3rem 2rem;
            text-align: center;
            background-color: #fff5f5;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .document-upload-area:hover {
            border-color: #dc3545;
            background-color: #ffe6e6;
        }
        
        .document-upload-area.dragover {
            border-color: #c82333;
            background-color: #ffccdd;
        }
        
        /* 圖片預覽卡片 */
        .image-preview-card {
            position: relative;
            width: 120px;
            height: 120px;
            border-radius: 0.5rem;
            overflow: hidden;
            border: 2px solid #dee2e6;
            background: white;
            transition: all 0.3s ease;
        }
        
        .image-preview-card:hover {
            border-color: #3498db;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }
        
        .image-preview-card img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .image-preview-card .remove-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background: rgba(220, 53, 69, 0.9);
            color: white;
            border: none;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            font-size: 12px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .image-preview-card .remove-btn:hover {
            background: #dc3545;
        }
        
        /* PDF 預覽卡片 */
        .document-preview-card {
            border: 2px solid #ffc1cc;
            border-radius: 0.5rem;
            padding: 1rem;
            background: #fff5f5;
            position: relative;
        }
        
        .document-preview-item {
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .document-preview-item .file-icon {
            font-size: 2rem;
            color: #dc3545;
        }
        
        .document-preview-item .file-info h6 {
            margin: 0;
            color: #333;
        }
        
        .document-preview-item .file-info small {
            color: #666;
        }
        
        .document-preview-item .remove-btn {
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 0.25rem;
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
            cursor: pointer;
        }
        
        .document-preview-item .remove-btn:hover {
            background: #c82333;
        }
        
        /* 編輯模式：現有圖片樣式 */
        .image-preview-card .existing-badge {
            position: absolute;
            top: 5px;
            left: 5px;
            background: rgba(40, 167, 69, 0.9);
            color: white;
            font-size: 10px;
            padding: 2px 6px;
            border-radius: 3px;
            font-weight: bold;
        }
        
        .image-preview-card.marked-for-deletion {
            opacity: 0.5;
            filter: grayscale(100%);
            position: relative;
        }
        
        .image-preview-card .deletion-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(220, 53, 69, 0.8);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
            border-radius: 0.5rem;
        }
        
        /* 拖曳排序增強樣式 */
        .image-preview-card {
            cursor: grab;
            user-select: none;
        }
        
        .image-preview-card:active {
            cursor: grabbing;
        }
        
        .image-preview-card.dragging {
            opacity: 0.5;
            transform: rotate(5deg) scale(1.05);
            z-index: 1000;
            transition: none;
        }
        
        .image-preview-card.drag-over {
            border-color: #3498db;
            border-width: 3px;
            transform: scale(1.05);
            box-shadow: 0 8px 20px rgba(52, 152, 219, 0.3);
        }
        
        .image-preview-card .drag-handle {
            position: absolute;
            top: 5px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(52, 152, 219, 0.9);
            color: white;
            font-size: 10px;
            padding: 2px 6px;
            border-radius: 3px;
            font-weight: bold;
            cursor: grab;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .image-preview-card:hover .drag-handle {
            opacity: 1;
        }
        
        .image-preview-card .drag-handle:active {
            cursor: grabbing;
        }
        
        /* 圖片容器拖曳回饋 */
        .property-image-container {
            min-height: 120px;
            position: relative;
        }
        
        .property-image-container.drop-zone-active {
            background: linear-gradient(45deg, rgba(52, 152, 219, 0.1) 25%, transparent 25%),
                        linear-gradient(-45deg, rgba(52, 152, 219, 0.1) 25%, transparent 25%),
                        linear-gradient(45deg, transparent 75%, rgba(52, 152, 219, 0.1) 75%),
                        linear-gradient(-45deg, transparent 75%, rgba(52, 152, 219, 0.1) 75%);
            background-size: 20px 20px;
            background-position: 0 0, 0 10px, 10px -10px, -10px 0px;
            border-radius: 0.5rem;
            border: 2px dashed #3498db;
        }
        
        /* 圖片數量限制提示樣式 */
        .upload-limit-warning {
            background: linear-gradient(135deg, #ff9800, #f57c00);
            color: white;
            padding: 0.75rem 1rem;
            border-radius: 0.5rem;
            font-size: 0.9rem;
            font-weight: 500;
            margin: 1rem 0;
            box-shadow: 0 2px 8px rgba(255, 152, 0, 0.3);
            animation: pulse-warning 2s infinite;
        }
        
        @@keyframes pulse-warning {
            0%, 100% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.02); opacity: 0.9; }
        }
        
        .upload-counter {
            background: #e8f4fd;
            color: #2980b9;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            font-size: 0.85rem;
            font-weight: 600;
            text-align: center;
            margin-bottom: 1rem;
            border: 1px solid #3498db;
        }
        
        .upload-counter.near-limit {
            background: #fff3cd;
            color: #856404;
            border-color: #ffc107;
        }
        
        .upload-counter.at-limit {
            background: #f8d7da;
            color: #721c24;
            border-color: #dc3545;
        }
        
        /* 視覺回饋動畫增強 */
        .image-preview-card.upload-success {
            animation: uploadSuccess 0.6s ease-out;
        }
        
        @@keyframes uploadSuccess {
            0% {
                transform: scale(0.8);
                opacity: 0;
            }
            50% {
                transform: scale(1.1);
                opacity: 0.8;
            }
            100% {
                transform: scale(1);
                opacity: 1;
            }
        }
        
        .image-preview-card.remove-animation {
            animation: removeImage 0.4s ease-out forwards;
        }
        
        @@keyframes removeImage {
            0% {
                transform: scale(1);
                opacity: 1;
            }
            50% {
                transform: scale(1.1) rotate(5deg);
                opacity: 0.5;
            }
            100% {
                transform: scale(0);
                opacity: 0;
            }
        }
        
        /* 響應式設計增強 */
        @@media (max-width: 768px) {
            .image-preview-card {
                width: 100px;
                height: 100px;
            }
            
            .property-image-container {
                gap: 0.75rem;
            }
            
            .upload-limit-warning,
            .upload-counter {
                font-size: 0.8rem;
                padding: 0.5rem 0.75rem;
            }
        }
        
        @@media (max-width: 576px) {
            .image-preview-card {
                width: 80px;
                height: 80px;
            }
            
            .property-image-container {
                gap: 0.5rem;
            }
        }

        .remove-btn.existing-image {
            background: rgba(255, 193, 7, 0.9);
        }
        
        .remove-btn.existing-image:hover {
            background: #ffc107;
        }
        
        /* 刊登方案詳情高亮樣式 */
        .plan-details-highlight {
            color: #dc3545 !important;
            font-weight: bold !important;
        }
        
        .plan-details-highlight .highlight-days {
            color: #dc3545 !important;
            font-weight: bold !important;
        }
        
        .plan-details-highlight .highlight-cost {
            color: #dc3545 !important;
            font-weight: bold !important;
        }
        
        /* 選中的刊登方案卡片樣式 */
        .listing-plan-card.selected {
            border-color: #3498db !important;
            box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.25) !important;
        }
        
        /* CSS 變數 - 精確色彩規範 */
        :root {
            --color-preview: #1a7482;
            --color-publish-disabled: #f9cfc7;
            --color-publish-active: #e95d54;
            --color-cancel-border: #66c0a4;
            --color-confirm-cancel: #313b48;
            --color-continue-edit: #1a7482;
            --color-confirm-submit: #e95d54;
            --color-return-edit: #66c0a4;
        }

        /* 按鈕基礎樣式 */
        .btn-preview {
            background-color: var(--color-preview);
            border: none;
            color: white;
            font-weight: 600;
            padding: 0.75rem 2rem;
            border-radius: 0.375rem;
            transition: all 0.3s ease;
        }
        
        .btn-preview:hover {
            background-color: #155e69;
            color: white;
            transform: translateY(-1px);
            box-shadow: 0 3px 10px rgba(26, 116, 130, 0.3);
        }

        /* 立即發佈按鈕 */
        .btn-publish {
            background-color: var(--color-publish-disabled);
            border: none;
            color: #666;
            font-weight: 600;
            padding: 0.75rem 3rem;
            border-radius: 0.375rem;
            transition: all 0.3s ease;
            cursor: not-allowed;
        }
        
        .btn-publish.active {
            background-color: var(--color-publish-active);
            color: white;
            cursor: pointer;
        }
        
        .btn-publish.active:hover {
            background-color: #d53f32;
            transform: translateY(-1px);
            box-shadow: 0 3px 10px rgba(233, 93, 84, 0.3);
        }
        
        /* 確保 disabled 狀態不會有 hover 效果 */
        .btn-publish:not(.active):hover {
            background-color: var(--color-publish-disabled);
            color: #666;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        /* 取消按鈕 */
        .btn-cancel {
            background: transparent;
            border: 2px solid var(--color-cancel-border);
            color: var(--color-cancel-border);
            font-weight: 600;
            padding: 0.75rem 2rem;
            border-radius: 0.375rem;
            transition: all 0.3s ease;
        }
        
        .btn-cancel:hover {
            background-color: var(--color-cancel-border);
            color: white;
            transform: translateY(-1px);
        }

        /* 確認取消按鈕 */
        .btn-confirm-cancel {
            background-color: var(--color-confirm-cancel);
            border: none;
            color: white;
            font-weight: 600;
        }

        /* 繼續編輯按鈕 */
        .btn-continue-edit {
            background-color: var(--color-continue-edit);
            border: none;
            color: white;
            font-weight: 600;
        }

        /* 確認提交按鈕 */
        .btn-confirm-submit {
            background-color: var(--color-confirm-submit);
            border: none;
            color: white;
            font-weight: 600;
        }

        /* 返回編輯按鈕 */
        .btn-return-edit {
            background: transparent;
            border: 2px solid var(--color-return-edit);
            color: var(--color-return-edit);
            font-weight: 600;
        }
        
        /* 級聯下拉選單 */
        .cascade-container {
            display: flex;
            gap: 1rem;
        }
        
        .cascade-container .form-group {
            flex: 1;
        }
        
        /* 設備選擇 */
        .equipment-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1rem;
        }
        
        .equipment-item {
            border: 1px solid #dee2e6;
            border-radius: 0.5rem;
            padding: 1rem;
            transition: all 0.3s ease;
        }
        
        .equipment-item:hover {
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }
        
        .equipment-item.selected {
            border-color: #3498db;
            background-color: #f1f8ff;
        }
        
        /* 設備三層階層樣式 */
        .equipment-hierarchy {
            display: flex;
            flex-direction: column;
            gap: 2rem;
        }
        
        .equipment-top-category {
            border: 1px solid #dee2e6;
            border-radius: 0.75rem;
            padding: 1.5rem;
            background: white;
        }
        
        .equipment-category-title {
            font-size: 1.25rem;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #3498db;
        }
        
        .equipment-sub-categories {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-top: 1rem;
        }
        
        .equipment-sub-item {
            border: 1px solid #e9ecef;
            border-radius: 0.5rem;
            padding: 1rem;
            background: #f8f9fa;
            transition: all 0.3s ease;
        }
        
        .equipment-sub-item:hover {
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            border-color: #3498db;
        }
        
        .equipment-sub-item.selected {
            border-color: #3498db;
            background-color: #f1f8ff;
        }
        
        .equipment-detail-items {
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 0.75rem;
            margin-top: 0.75rem;
        }
        
        .equipment-detail-items .form-check {
            margin-bottom: 0.5rem;
        }
        
        .equipment-detail-items .form-check:last-child {
            margin-bottom: 0;
        }
        
        /* 側邊欄步驟導航 */
        .sidebar-nav {
            position: sticky;
            top: var(--nav-offset, 96px); /* 動態偏移，預設 96px */
            max-height: calc(100vh - var(--nav-offset, 96px) - 20px);
            overflow-y: auto;
        }
        
        .step-nav-card {
            background: white;
            border-radius: 0.75rem;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }
        
        .step-nav-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .step-nav-item {
            padding: 0.75rem 0;
            border-bottom: 1px solid #f0f0f0;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .step-nav-item:last-child {
            border-bottom: none;
        }
        
        .step-nav-item:hover {
            background-color: #f8f9fa;
            padding-left: 0.5rem;
        }
        
        .step-nav-item.active {
            color: var(--color-preview);
            font-weight: 600;
            background-color: #f1f8ff;
            padding-left: 0.5rem;
            border-left: 3px solid var(--color-preview);
        }
        
        .progress-indicator {
            height: 6px;
            background: #f0f0f0;
            border-radius: 3px;
            overflow: hidden;
            margin-bottom: 1rem;
        }
        
        .progress-bar-custom {
            height: 100%;
            background: linear-gradient(90deg, var(--color-preview), var(--color-publish-active));
            border-radius: 3px;
            transition: width 0.3s ease;
            width: 0%;
        }

        /* 隱藏數字輸入箭頭 */
        input[type="number"]::-webkit-outer-spin-button,
        input[type="number"]::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        
        input[type="number"] {
            -moz-appearance: textfield;
        }
        
        /* 守則欄位樣式 */
        .rule-input-group {
            position: relative;
        }
        
        .rule-input-group .remove-rule-btn {
            border-color: #dc3545;
            color: #dc3545;
        }
        
        .rule-input-group .remove-rule-btn:hover {
            background-color: #dc3545;
            color: white;
        }
        
        .add-rule-btn {
            border-color: #28a745;
            color: #28a745;
        }
        
        .add-rule-btn:hover {
            background-color: #28a745;
            color: white;
        }

        /* 響應式設計 */
        /* 大螢幕專用佈局 (1200px 以上) */
        @@media (min-width: 1200px) {
            .main-content-row {
                display: flex;
                gap: 3rem;
            }
            
            .form-content {
                flex: 3;
                min-width: 0; /* 防止 flex 項目溢出 */
            }
            
            .sidebar-content {
                flex: 1;
                max-width: 400px;
                min-width: 320px;
            }
            
            .form-section {
                padding: 2.5rem;
            }
            
            /* 大螢幕下的表單欄位優化 */
            .row .col-md-12 {
                max-width: none;
            }
            
            /* 改善圖片上傳區域在大螢幕的顯示 */
            .image-upload-area {
                padding: 4rem 3rem;
            }
            
            /* 優化設備選擇網格 */
            .equipment-grid {
                grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
                gap: 1.5rem;
            }
            
            /* 步驟導航優化 */
            .step-nav {
                position: sticky;
                top: 2rem;
            }
        }
        
        /* 中等螢幕佈局 (768px - 1199px) */
        @@media (min-width: 768px) and (max-width: 1199px) {
            .main-content-row {
                display: flex;
                gap: 2rem;
            }
            
            .form-content {
                flex: 2;
                min-width: 0; /* 防止 flex 項目溢出 */
            }
            
            .sidebar-content {
                flex: 1;
                max-width: 350px;
            }
        }
        
        @@media (max-width: 768px) {
            .property-create-container {
                padding: 1rem;
            }
            
            .form-section {
                padding: 1.5rem;
                margin-bottom: 1.5rem;
            }
            
            .cascade-container {
                flex-direction: column;
                gap: 0;
            }
            
            .equipment-grid {
                grid-template-columns: 1fr;
            }
            
            .sidebar-content {
                order: 2;
                margin-top: 2rem;
            }
            
            .form-content {
                order: 1;
            }
            
            .step-nav-card {
                padding: 1rem;
            }
            
            /* 行動版按鈕佈局 */
            .btn-group-mobile {
                display: flex;
                flex-wrap: wrap;
                gap: 0.5rem;
                justify-content: center;
            }
            
            .btn-group-mobile .btn {
                flex: 1 1 calc(50% - 0.25rem);
                min-width: 140px;
            }
        }
    </style>
    
    <link rel="stylesheet" href="~/css/_LoginPartialShared.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/zuHause.styles.css" asp-append-version="true" />
</head>
<body>
    <div class="min-vh-100 bg-light">
        <!-- 主導覽列 -->
        @await Component.InvokeAsync("NavbarMember")
        
        <!-- 主要內容 -->
        <div class="container-fluid px-4 py-4">
            <div class="property-create-container">
                <!-- 頁面標題 -->
                <div class="text-center mb-4">
                    <h1 class="display-5 fw-bold text-primary mb-2">刊登新房源</h1>
                    <p class="text-muted">請填寫以下資訊來刊登您的房源</p>
                </div>
                
                <div class="main-content-row">
                    <!-- 左側表單內容 -->
                    <div class="form-content">
                        <form id="propertyCreateForm" asp-action="@formAction" asp-controller="Property" method="post" enctype="multipart/form-data" novalidate>
                    @Html.AntiForgeryToken()
                    
                    <!-- TempSessionId 隱藏欄位 -->
                    <input type="hidden" id="tempSessionIdInput" name="TempSessionId" value="" />
                    
                    @if (isEditMode && propertyId.HasValue)
                    {
                        <!-- 編輯模式：包含房源ID -->
                        <input type="hidden" name="id" value="@propertyId" />
                        <input type="hidden" asp-for="PropertyData.PropertyId" />
                    }
                    
                    <!-- 兩階段上傳：臨時會話ID -->
                    <input type="hidden" asp-for="PropertyData.TempSessionId" id="tempSessionId" />
                    
                    <!-- 表單模式標識 -->
                    <input type="hidden" asp-for="FormMode" />
                    <input type="hidden" asp-for="IsEditMode" />
                    
                    <!-- 基本資訊區塊 -->
                    <div class="form-section" id="basicInfo">
                        <h2 class="section-title">
                            <i class="fas fa-info-circle me-2"></i>基本資訊
                        </h2>
                        
                        <div class="row">
                            <div class="col-12">
                                <div class="form-group">
                                    <label class="form-label required" for="Title">房源標題</label>
                                    <input type="text" class="form-control" id="Title" name="Title" 
                                           value="@(Model.PropertyData?.Title ?? "")" 
                                           placeholder="例：台北市大安區精裝修套房，近捷運站" maxlength="100" required>
                                    <div class="form-text">建議包含地區、房型、特色等關鍵字，讓租客更容易找到您的房源</div>
                                    <span asp-validation-for="PropertyData.Title" class="text-danger small"></span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="cascade-container">
                            <div class="form-group">
                                <label class="form-label required" for="CityId">縣市</label>
                                <select class="form-select" id="CityId" name="CityId" required>
                                    <option value="">請選擇縣市</option>
                                    @if (Model.Cities != null)
                                    {
                                        @foreach (var city in Model.Cities)
                                        {
                                            var districtsJson = System.Text.Json.JsonSerializer.Serialize(city.Districts ?? new List<zuHause.DTOs.DistrictDto>());
                                            var isSelected = Model.PropertyData?.CityId == city.CityId;
                                            
                                            <option value="@city.CityId" 
                                                    data-districts="@districtsJson"
                                                    selected="@isSelected">
                                                @city.CityName
                                            </option>
                                        }
                                    }
                                </select>
                                <span asp-validation-for="PropertyData.CityId" class="text-danger small"></span>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label required" for="DistrictId">區域</label>
                                <select class="form-select" id="DistrictId" name="DistrictId" required>
                                    <option value="">請先選擇縣市</option>
                                </select>
                                <span asp-validation-for="PropertyData.DistrictId" class="text-danger small"></span>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label required" for="AddressLine">詳細地址</label>
                            <input type="text" class="form-control" id="AddressLine" name="AddressLine" 
                                   value="@(Model.PropertyData?.AddressLine ?? "")" 
                                   placeholder="例：忠孝東路四段181巷7弄13號3樓" maxlength="200" required>
                            <div class="form-text">請輸入完整地址，不含縣市區域</div>
                            <span asp-validation-for="PropertyData.AddressLine" class="text-danger small"></span>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label" for="Description">房源描述</label>
                            <textarea class="form-control" id="Description" name="Description" rows="6" 
                                      placeholder="請描述房源的特色、周邊環境、交通便利性等...">@(Model.PropertyData?.Description ?? "")</textarea>
                            <div class="form-text">詳細的描述能幫助租客更了解您的房源</div>
                            <span asp-validation-for="PropertyData.Description" class="text-danger small"></span>
                        </div>
                    </div>
                    
                    <!-- 房屋資訊區塊 -->
                    <div class="form-section" id="houseInfo">
                        <h2 class="section-title">
                            <i class="fas fa-home me-2"></i>房屋資訊
                        </h2>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label required" for="MonthlyRent">月租金</label>
                                    <div class="input-group">
                                        <span class="input-group-text">NT$</span>
                                        <input type="number" class="form-control" id="MonthlyRent" name="MonthlyRent" 
                                               placeholder="請輸入月租金" 
                                               min="1000" max="999999" step="100" required>
                                        <span class="input-group-text">元</span>
                                    </div>
                                    <span asp-validation-for="PropertyData.MonthlyRent" class="text-danger small"></span>
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <!-- 押金欄位已移動到費用及守則區塊 -->
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="form-label required" for="RoomCount">房間數</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" id="RoomCount" name="RoomCount" 
                                               placeholder="請輸入房間數" 
                                               min="0" max="10" step="1" required>
                                        <span class="input-group-text">房</span>
                                    </div>
                                    <span asp-validation-for="PropertyData.RoomCount" class="text-danger small"></span>
                                </div>
                            </div>
                            
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="form-label required" for="LivingRoomCount">客廳數</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" id="LivingRoomCount" name="LivingRoomCount" 
                                               placeholder="請輸入客廳數" 
                                               min="0" max="5" step="1" required>
                                        <span class="input-group-text">廳</span>
                                    </div>
                                    <span asp-validation-for="PropertyData.LivingRoomCount" class="text-danger small"></span>
                                </div>
                            </div>
                            
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="form-label required" for="BathroomCount">衛浴數</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" id="BathroomCount" name="BathroomCount" 
                                               placeholder="請輸入衛浴數" 
                                               min="1" max="10" step="1" required>
                                        <span class="input-group-text">衛</span>
                                    </div>
                                    <span asp-validation-for="PropertyData.BathroomCount" class="text-danger small"></span>
                                </div>
                            </div>
                            
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="form-label required" for="Area">坪數</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" id="Area" name="Area" 
                                               placeholder="請輸入坪數" 
                                               min="1" max="1000" step="0.1" required>
                                        <span class="input-group-text">坪</span>
                                    </div>
                                    <span asp-validation-for="PropertyData.Area" class="text-danger small"></span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label required" for="CurrentFloor">所在樓層</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" id="CurrentFloor" name="CurrentFloor" 
                                               placeholder="請輸入所在樓層" 
                                               min="-3" max="50" step="1" required>
                                        <span class="input-group-text">樓</span>
                                    </div>
                                    <div class="form-text">負數表示地下樓層（如：-1 = B1）</div>
                                    <span asp-validation-for="PropertyData.CurrentFloor" class="text-danger small"></span>
                                    <div id="floorValidationError" class="text-danger small" style="display: none;">
                                        所在樓層不能大於總樓層數
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label required" for="TotalFloors">總樓層數</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" id="TotalFloors" name="TotalFloors" 
                                               placeholder="請輸入總樓層數" 
                                               min="1" max="50" step="1" required>
                                        <span class="input-group-text">層</span>
                                    </div>
                                    <span asp-validation-for="PropertyData.TotalFloors" class="text-danger small"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- 費用資訊區塊 -->
                    <div class="form-section" id="feeInfo">
                        <h2 class="section-title">
                            <i class="fas fa-dollar-sign me-2"></i>費用及守則
                        </h2>
                        
                        <!-- 押金資訊 -->
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label required" for="DepositAmount">押金金額</label>
                                    <div class="input-group">
                                        <span class="input-group-text">NT$</span>
                                        <input type="number" class="form-control" id="DepositAmount" name="DepositAmount" 
                                               placeholder="請輸入押金金額" 
                                               min="0" max="999999" step="100" required>
                                        <span class="input-group-text">元</span>
                                    </div>
                                    <span asp-validation-for="PropertyData.DepositAmount" class="text-danger small"></span>
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label required" for="DepositMonths">押金月數</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" id="DepositMonths" name="DepositMonths" 
                                               placeholder="請輸入押金月數" 
                                               min="0" max="6" step="1" required>
                                        <span class="input-group-text">個月</span>
                                    </div>
                                    <span asp-validation-for="PropertyData.DepositMonths" class="text-danger small"></span>
                                </div>
                            </div>
                        </div>
                        
                        <!-- 最短租期 -->
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label required" for="MinimumRentalMonths">最短租期</label>
                                    <select class="form-select" id="MinimumRentalMonths" name="MinimumRentalMonths" required>
                                        <option value="">請選擇最短租期</option>
                                        @foreach (var option in Model.MinimumRentalOptions)
                                        {
                                            <option value="@option.Key" 
                                                    selected="@(Model.PropertyData?.MinimumRentalMonths == option.Key)">
                                                @option.Value
                                            </option>
                                        }
                                    </select>
                                    <span asp-validation-for="PropertyData.MinimumRentalMonths" class="text-danger small"></span>
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <!-- 預留空間給其他欄位 -->
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label">管理費</label>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="ManagementFeeIncluded" id="ManagementFeeIncluded" value="true" 
                                               checked="@(Model.PropertyData?.ManagementFeeIncluded == true)">
                                        <label class="form-check-label" for="ManagementFeeIncluded">
                                            已包含在租金內
                                        </label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="ManagementFeeIncluded" id="ManagementFeeNotIncluded" value="false" 
                                               checked="@(Model.PropertyData?.ManagementFeeIncluded == false)">
                                        <label class="form-check-label" for="ManagementFeeNotIncluded">
                                            須另外收取
                                        </label>
                                    </div>
                                    <div id="ManagementFeeAmountContainer" style="display: none;">
                                        <div class="input-group mt-2">
                                            <span class="input-group-text">NT$</span>
                                            <input type="number" class="form-control" id="ManagementFeeAmount" name="ManagementFeeAmount" 
                                                   placeholder="請輸入管理費金額" min="0" step="100">
                                            <span class="input-group-text">元/月</span>
                                        </div>
                                    </div>
                                    <span asp-validation-for="PropertyData.ManagementFeeAmount" class="text-danger small"></span>
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <!-- 押金月數已移動到費用及守則區塊開頭 -->
                            </div>
                        </div>
                        
                        <!-- 水電費計算 -->
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label required" for="WaterFeeType">水費計算方式</label>
                                    <select class="form-select" id="WaterFeeType" name="WaterFeeType" required>
                                        <option value="">請選擇水費計算方式</option>
                                        @foreach (var option in Model.WaterFeeOptions)
                                        {
                                            <option value="@option" 
                                                    selected="@(Model.PropertyData?.WaterFeeType == option)">
                                                @option
                                            </option>
                                        }
                                    </select>
                                    <div id="CustomWaterFeeContainer" style="display: none;">
                                        <div class="input-group mt-2">
                                            <span class="input-group-text">NT$</span>
                                            <input type="number" class="form-control" id="CustomWaterFee" name="CustomWaterFee" 
                                                   placeholder="請輸入自訂水費" min="0" step="0.1">
                                            <span class="input-group-text">元/月</span>
                                        </div>
                                    </div>
                                    <span asp-validation-for="PropertyData.WaterFeeType" class="text-danger small"></span>
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label required" for="ElectricityFeeType">電費計算方式</label>
                                    <select class="form-select" id="ElectricityFeeType" name="ElectricityFeeType" required>
                                        <option value="">請選擇電費計算方式</option>
                                        @foreach (var option in Model.ElectricityFeeOptions)
                                        {
                                            <option value="@option" 
                                                    selected="@(Model.PropertyData?.ElectricityFeeType == option)">
                                                @option
                                            </option>
                                        }
                                    </select>
                                    <div id="CustomElectricityFeeContainer" style="display: none;">
                                        <div class="input-group mt-2">
                                            <span class="input-group-text">NT$</span>
                                            <input type="number" class="form-control" id="CustomElectricityFee" name="CustomElectricityFee" 
                                                   placeholder="請輸入自訂電費" min="0" step="0.1">
                                            <span class="input-group-text">元/度</span>
                                        </div>
                                    </div>
                                    <span asp-validation-for="PropertyData.ElectricityFeeType" class="text-danger small"></span>
                                </div>
                            </div>
                        </div>
                        
                        <!-- 清潔費 -->
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label required">清潔費</label>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="CleaningFeeRequired" id="CleaningFeeNotRequired" value="false" 
                                               checked="@(Model.PropertyData?.CleaningFeeRequired == false)">
                                        <label class="form-check-label" for="CleaningFeeNotRequired">
                                            不須清潔費
                                        </label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="CleaningFeeRequired" id="CleaningFeeRequired" value="true" 
                                               checked="@(Model.PropertyData?.CleaningFeeRequired == true)">
                                        <label class="form-check-label" for="CleaningFeeRequired">
                                            須收取清潔費
                                        </label>
                                    </div>
                                    <div id="CleaningFeeAmountContainer" style="display: none;">
                                        <div class="input-group mt-2">
                                            <span class="input-group-text">NT$</span>
                                            <input type="number" class="form-control" id="CleaningFeeAmount" name="CleaningFeeAmount" 
                                                   placeholder="請輸入清潔費金額" min="0" step="100">
                                            <span class="input-group-text">元</span>
                                        </div>
                                    </div>
                                    <span asp-validation-for="PropertyData.CleaningFeeRequired" class="text-danger small"></span>
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <!-- 預留空間 -->
                            </div>
                        </div>
                        
                        <!-- 停車位費用 -->
                        <div class="form-group">
                            <label class="form-label required">停車位</label>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="ParkingAvailable" id="ParkingNotAvailable" value="false" 
                                       checked="@(Model.PropertyData?.ParkingAvailable == false)">
                                <label class="form-check-label" for="ParkingNotAvailable">
                                    沒有停車位
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="ParkingAvailable" id="ParkingAvailable" value="true" 
                                       checked="@(Model.PropertyData?.ParkingAvailable == true)">
                                <label class="form-check-label" for="ParkingAvailable">
                                    有停車位
                                </label>
                            </div>
                            <div id="ParkingFeeContainer" style="display: none;">
                                <div class="form-check mt-2">
                                    <input class="form-check-input" type="checkbox" id="ParkingFeeRequired" name="ParkingFeeRequired" 
                                           checked="@(Model.PropertyData?.ParkingFeeRequired == true)">
                                    <label class="form-check-label" for="ParkingFeeRequired">
                                        停車費須額外收取
                                    </label>
                                </div>
                                <div id="ParkingFeeAmountContainer" style="display: none;">
                                    <div class="input-group mt-2">
                                        <span class="input-group-text">NT$</span>
                                        <input type="number" class="form-control" id="ParkingFeeAmount" name="ParkingFeeAmount" 
                                               placeholder="請輸入停車費金額" min="0" step="100">
                                        <span class="input-group-text">元/月</span>
                                    </div>
                                </div>
                            </div>
                            <span asp-validation-for="PropertyData.ParkingAvailable" class="text-danger small"></span>
                        </div>
                        
                        <!-- 守則欄位 -->
                        <div class="form-group">
                            <label class="form-label">房屋守則</label>
                            <div id="rulesContainer">
                                <div class="rule-input-group mb-2">
                                    <div class="input-group">
                                        <input type="text" class="form-control rule-input" name="SpecialRules" 
                                               placeholder="請輸入房屋守則（最多20字）" maxlength="20">
                                        <button type="button" class="btn btn-outline-success add-rule-btn">
                                            <i class="fas fa-plus"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="form-text">最多可新增3個守則，每個守則最多20字</div>
                        </div>
                    </div>
                    
                    <!-- 設備與服務區塊 -->
                    <div class="form-section" id="equipmentInfo">
                        <h2 class="section-title">
                            <i class="fas fa-cogs me-2"></i>設備與服務
                        </h2>
                        
                        <div class="equipment-hierarchy" id="equipmentHierarchy">
                            @if (Model.EquipmentCategoriesHierarchy != null)
                            {
                                @foreach (var topCategory in Model.EquipmentCategoriesHierarchy)
                                {
                                    <!-- 大分類標題 -->
                                    <div class="equipment-top-category">
                                        <h4 class="equipment-category-title">@topCategory.CategoryName</h4>
                                        
                                        @if (topCategory.Children.Any())
                                        {
                                            <div class="equipment-sub-categories">
                                                @foreach (var subCategory in topCategory.Children)
                                                {
                                                    <!-- 子項勾選框 -->
                                                    <div class="equipment-sub-item" data-category-id="@subCategory.CategoryId">
                                                        <div class="form-check">
                                                            <input class="form-check-input sub-category-checkbox" type="checkbox" 
                                                                   name="SelectedEquipmentIds" 
                                                                   value="@subCategory.CategoryId" 
                                                                   id="equipment_@subCategory.CategoryId"
                                                                   data-parent-id="@topCategory.CategoryId"
                                                                   checked="@(Model.PropertyData?.SelectedEquipmentIds?.Contains(subCategory.CategoryId) == true)">
                                                            <label class="form-check-label fw-medium" for="equipment_@subCategory.CategoryId">
                                                                @subCategory.CategoryName
                                                            </label>
                                                        </div>
                                                        
                                                        @if (subCategory.Children.Any())
                                                        {
                                                            <!-- 細項選擇 -->
                                                            <div class="equipment-detail-items mt-2" id="details_@subCategory.CategoryId" 
                                                                 style="display: @(Model.PropertyData?.SelectedEquipmentIds?.Contains(subCategory.CategoryId) == true ? "block" : "none")">
                                                                @foreach (var detailCategory in subCategory.Children)
                                                                {
                                                                    <div class="form-check form-check-sm ms-3">
                                                                        <input class="form-check-input detail-category-checkbox" type="checkbox" 
                                                                               name="SelectedEquipmentIds" 
                                                                               value="@detailCategory.CategoryId" 
                                                                               id="equipment_@detailCategory.CategoryId"
                                                                               data-parent-id="@subCategory.CategoryId"
                                                                               checked="@(Model.PropertyData?.SelectedEquipmentIds?.Contains(detailCategory.CategoryId) == true)">
                                                                        <label class="form-check-label small" for="equipment_@detailCategory.CategoryId">
                                                                            @detailCategory.CategoryName
                                                                        </label>
                                                                    </div>
                                                                }
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                }
                            }
                        </div>
                    </div>
                    
                    <!-- 刊登方案區塊 -->
                    <div class="form-section" id="planInfo">
                        <h2 class="section-title">
                            <i class="fas fa-calendar me-2"></i>刊登方案
                        </h2>
                        
                        <div class="row">
                            @if (Model.ListingPlans != null)
                            {
                                @foreach (var plan in Model.ListingPlans)
                                {
                                    <div class="col-md-4 mb-3">
                                        <div class="card h-100 listing-plan-card" data-plan-id="@plan.PlanId" data-plan-days="@plan.MinListingDays">
                                            <div class="card-body">
                                                <div class="form-check">
                                                    <input class="form-check-input listing-plan-radio" type="radio" name="ListingPlanId" 
                                                           value="@plan.PlanId" id="plan_@plan.PlanId"
                                                           checked="@(Model.PropertyData?.ListingPlanId == plan.PlanId)" required>
                                                    <label class="form-check-label" for="plan_@plan.PlanId">
                                                        <h5 class="card-title">@plan.PlanName</h5>
                                                        <p class="card-text">
                                                            <strong>NT$ @String.Format("{0:N0}", (plan.PricePerDay * plan.MinListingDays))</strong>
                                                        </p>
                                                        <small class="text-muted">方案詳情請洽客服</small>
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                        
                        <!-- 選中方案詳情顯示區域 -->
                        <div id="selectedPlanDetails" class="mt-4" style="display: none;">
                            <div class="alert alert-info">
                                <div id="planDetailsContent" class="plan-details-highlight">
                                    <!-- 詳情內容將由 JavaScript 動態生成 -->
                                </div>
                            </div>
                        </div>
                        
                        <span asp-validation-for="PropertyData.ListingPlanId" class="text-danger small"></span>
                    </div>
                    
                    <!-- 房源圖片上傳區塊 -->
                    <div class="form-section" id="imageInfo">
                        <h2 class="section-title">
                            <i class="fas fa-camera me-2"></i>房屋照片
                        </h2>
                        
                        <div class="form-group">
                            <label class="form-label required">房源圖片</label>
                            <div class="image-upload-area" id="propertyImageUploadArea">
                                <i class="fas fa-cloud-upload-alt upload-icon"></i>
                                <div class="upload-text">
                                    <h4>點擊或拖曳圖片到此處</h4>
                                    <p class="text-muted mb-3">支援 JPG、PNG、WebP 格式，單檔最大 2MB，最多可上傳 15 張圖片</p>
                                </div>
                                <input type="file" asp-for="PropertyData.PropertyImages" id="propertyImageFiles" multiple accept="image/jpeg,image/png,image/webp" style="display: none;">
                                <button type="button" class="btn btn-outline-primary" onclick="document.getElementById('propertyImageFiles').click()">
                                    <i class="fas fa-plus me-2"></i>選擇圖片
                                </button>
                            </div>
                            <div class="form-text">
                                <i class="fas fa-info-circle me-1"></i>
                                系統將自動轉換為 WebP 格式以提升載入速度
                            </div>
                            <span asp-validation-for="PropertyData.PropertyImages" class="text-danger small"></span>
                        </div>
                        
                        <!-- 圖片預覽區域 -->
                        <div id="propertyImagePreview" class="mt-3" style="display: none;">
                            <h6><i class="fas fa-eye me-2"></i>已上傳的圖片：</h6>
                            <div id="propertyImageContainer" class="d-flex flex-wrap gap-3">
                                <!-- 動態生成的圖片預覽卡片 -->
                            </div>
                        </div>
                        
                        <!-- 上傳進度 -->
                        <div id="propertyImageUploadProgress" class="mt-3" style="display: none;">
                            <div class="d-flex align-items-center">
                                <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                                <span>正在上傳圖片...</span>
                            </div>
                            <div class="progress mt-2">
                                <div class="progress-bar" role="progressbar" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- 房產證明文件上傳區塊 -->
                    <div class="form-section" id="documentInfo">
                        <h2 class="section-title">
                            <i class="fas fa-file-pdf me-2"></i>房產證明文件
                        </h2>
                        
                        <div class="form-group">
                            <label class="form-label">房產證明文件 <span class="text-muted">(選填)</span></label>
                            <div class="document-upload-area" id="documentUploadArea">
                                <i class="fas fa-cloud-upload-alt upload-icon text-danger"></i>
                                <h4>點擊或拖曳 PDF 文件到此處</h4>
                                <p class="text-muted mb-3">支援 PDF 格式，單檔最大 10MB</p>
                                <input type="file" asp-for="PropertyData.PropertyProofDocument" id="documentFile" accept="application/pdf" style="display: none;">
                                <button type="button" class="btn btn-outline-danger" onclick="document.getElementById('documentFile').click()">
                                    <i class="fas fa-file-pdf me-2"></i>選擇 PDF 文件
                                </button>
                            </div>
                            <div class="form-text">
                                <i class="fas fa-info-circle me-1"></i>
                                請上傳房屋所有權狀、租賃契約或其他相關證明文件
                            </div>
                            <span asp-validation-for="PropertyData.PropertyProofDocument" class="text-danger small"></span>
                        </div>
                        
                        <!-- PDF 預覽區域 -->
                        <div id="documentPreview" class="mt-3" style="display: none;">
                            <h6><i class="fas fa-file-check me-2"></i>已上傳的文件：</h6>
                            <div id="documentContainer" class="document-preview-card">
                                <!-- 動態生成的 PDF 預覽卡片 -->
                            </div>
                        </div>
                        
                        <!-- 文件上傳進度 -->
                        <div id="documentUploadProgress" class="mt-3" style="display: none;">
                            <div class="d-flex align-items-center">
                                <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                                <span>正在上傳文件...</span>
                            </div>
                            <div class="progress mt-2">
                                <div class="progress-bar bg-danger" role="progressbar" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- 操作按鈕 -->
                    <div class="text-center btn-group-mobile">
                        <button type="button" id="manualSaveButton" class="btn btn-outline-secondary">
                            <i class="fas fa-bookmark me-2"></i>儲存草稿
                        </button>
                        <button type="button" id="previewButton" class="btn btn-preview">
                            <i class="fas fa-eye me-2"></i>預覽
                        </button>
                        <button type="button" id="cancelButton" class="btn btn-cancel">
                            <i class="fas fa-times me-2"></i>取消發佈
                        </button>
                        <button type="submit" id="submitButton" class="btn btn-publish btn-lg" disabled>
                            <i class="fas fa-paper-plane me-2"></i>@(ViewBag.SubmitText ?? "立即發佈")
                        </button>
                    </div>
                </form>
                    </div>
                    
                    <!-- 右側導航欄 -->
                    <div class="sidebar-content">
                        <div class="sidebar-nav">
                            <div class="step-nav-card">
                                <h6 class="mb-3">完成進度</h6>
                                <div class="progress-indicator">
                                    <div class="progress-bar-custom" id="progressBar"></div>
                                </div>
                                <ul class="step-nav-list" id="stepNavList">
                                    <li class="step-nav-item" data-target="basicInfo">
                                        <i class="fas fa-info-circle me-2"></i>基本資訊
                                        <span class="float-end" id="basicInfo-status">
                                            <i class="fas fa-circle text-muted small"></i>
                                        </span>
                                    </li>
                                    <li class="step-nav-item" data-target="houseInfo">
                                        <i class="fas fa-home me-2"></i>房屋資訊
                                        <span class="float-end" id="houseInfo-status">
                                            <i class="fas fa-circle text-muted small"></i>
                                        </span>
                                    </li>
                                    <li class="step-nav-item" data-target="feeInfo">
                                        <i class="fas fa-dollar-sign me-2"></i>費用及守則
                                        <span class="float-end" id="feeInfo-status">
                                            <i class="fas fa-circle text-muted small"></i>
                                        </span>
                                    </li>
                                    <li class="step-nav-item" data-target="equipmentInfo">
                                        <i class="fas fa-cogs me-2"></i>設備與服務
                                        <span class="float-end" id="equipmentInfo-status">
                                            <i class="fas fa-circle text-muted small"></i>
                                        </span>
                                    </li>
                                    <li class="step-nav-item" data-target="planInfo">
                                        <i class="fas fa-calendar me-2"></i>刊登方案
                                        <span class="float-end" id="planInfo-status">
                                            <i class="fas fa-circle text-muted small"></i>
                                        </span>
                                    </li>
                                    <li class="step-nav-item" data-target="imageInfo">
                                        <i class="fas fa-camera me-2"></i>房屋照片
                                        <span class="float-end" id="imageInfo-status">
                                            <i class="fas fa-circle text-muted small"></i>
                                        </span>
                                    </li>
                                    <li class="step-nav-item" data-target="documentInfo">
                                        <i class="fas fa-file-pdf me-2"></i>房屋所有權證明
                                        <span class="float-end" id="documentInfo-status">
                                            <i class="fas fa-circle text-muted small"></i>
                                        </span>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- 取消發佈確認模態框 -->
    <div class="modal fade" id="cancelModal" tabindex="-1" aria-labelledby="cancelModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body text-center py-4">
                    <h5 class="mb-3">是否確定取消發佈？</h5>
                    <div class="mt-4">
                        <button type="button" class="btn btn-confirm-cancel me-3 px-4" data-bs-dismiss="modal">
                            確定取消
                        </button>
                        <button type="button" class="btn btn-continue-edit px-4" data-bs-dismiss="modal">
                            繼續編輯
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 房源審核提醒模態框 -->
    <div class="modal fade" id="submitConfirmModal" tabindex="-1" aria-labelledby="submitConfirmModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body text-center py-4">
                    <h5 class="mb-3">房源審核提醒</h5>
                    <p class="text-muted small mb-3">您的房源資料已提交成功！房源將進入後台審核流程，我們會仔細檢查以下項目：</p>
                    <ul class="text-start small text-muted mb-3">
                        <li>房產證明文件的完整性</li>
                        <li>房源照片品質與真實性</li>
                        <li>房源資訊的準確性</li>
                    </ul>
                    <div class="border rounded p-3 mb-4">
                        <h6 class="mb-2">審核時間</h6>
                        <small class="text-muted">通常需要 1 至 3 個工作天，審核通過後將通知您付款，敬請留意，付款成功後系統將立即上架！</small>
                    </div>
                    <div class="mt-4">
                        <button type="button" class="btn btn-return-edit me-3 px-4" data-bs-dismiss="modal">
                            返回編輯
                        </button>
                        <button type="button" class="btn btn-confirm-submit px-4" id="finalSubmitButton">
                            確認提交
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 預覽模態框 -->
    <div class="modal fade" id="previewModal" tabindex="-1" aria-labelledby="previewModalLabel" aria-hidden="true" data-bs-backdrop="true" data-bs-keyboard="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="previewModalLabel">房源預覽</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="previewContent">
                        <!-- 預覽內容將由 JavaScript 動態生成 -->
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">載入中...</span>
                            </div>
                            <p class="mt-2 text-muted">載入預覽中...</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">關閉預覽</button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Bootstrap 5 JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- PropertyFormCache 暫存管理 -->
    <script src="~/js/property-form-cache.js" asp-append-version="true"></script>
    
    <!-- 自定義 JavaScript -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // 設定側邊欄與導航列間距 (依照 header 高度動態計算)
            function updateSidebarOffset() {
                const header = document.querySelector('header');
                const offset = (header ? header.offsetHeight : 76) + 20; // 導航列高度 + 20px 安全距
                document.documentElement.style.setProperty('--nav-offset', offset + 'px');
            }

            updateSidebarOffset();
            window.addEventListener('resize', updateSidebarOffset);

            // 初始化表單暫存管理器 - 使用 ID 選擇器
            const formSelector = '#propertyCreateForm';
            const formElement = document.querySelector(formSelector);
            
            let formCache = null;
            if (formElement) {
                formCache = new PropertyFormCache(formSelector);
            } else {
                console.warn('PropertyFormCache: 找不到指定的表單元素:', formSelector);
            }
            
            // 手動暫存按鈕功能（可選）
            const saveButton = document.getElementById('manualSaveButton');
            if (saveButton) {
                saveButton.addEventListener('click', function() {
                    formCache.manualSave();
                });
            }
            // 級聯下拉選單
            const citySelect = document.getElementById('CityId');
            const districtSelect = document.getElementById('DistrictId');
            
            citySelect.addEventListener('change', function() {
                const selectedOption = this.options[this.selectedIndex];
                let districts = [];
                
                console.log('Selected city:', selectedOption.value, selectedOption.textContent);
                console.log('Districts data:', selectedOption.dataset.districts);
                
                try {
                    if (selectedOption.value && selectedOption.dataset.districts) {
                        // 處理可能被 HTML 編碼的 JSON 字符串
                        let jsonString = selectedOption.dataset.districts;
                        
                        // 解碼 HTML 實體
                        const textarea = document.createElement('textarea');
                        textarea.innerHTML = jsonString;
                        jsonString = textarea.value;
                        
                        if (jsonString && jsonString.trim() !== '' && jsonString !== '[]') {
                            districts = JSON.parse(jsonString);
                            console.log('Parsed districts:', districts);
                        }
                    }
                } catch (error) {
                    console.error('Error parsing districts JSON:', error);
                    console.error('原始 JSON 字符串:', selectedOption.dataset.districts);
                    districts = [];
                }
                
                // 清空並重建區域選項
                districtSelect.innerHTML = '<option value="">請選擇區域</option>';
                
                if (districts && districts.length > 0) {
                    // 按名稱排序區域
                    districts.sort((a, b) => {
                        const nameA = a.districtName || a.DistrictName || '';
                        const nameB = b.districtName || b.DistrictName || '';
                        return nameA.localeCompare(nameB, 'zh-TW');
                    });
                    
                    districts.forEach(function(district) {
                        const option = document.createElement('option');
                        option.value = district.districtId || district.DistrictId;
                        option.textContent = district.districtName || district.DistrictName;
                        districtSelect.appendChild(option);
                    });
                    console.log(`已加載 ${districts.length} 個區域`);
                } else {
                    console.warn('沒有找到區域資料');
                }
            });
            
            // 樓層驗證邏輯
            const currentFloorInput = document.getElementById('CurrentFloor');
            const totalFloorsInput = document.getElementById('TotalFloors');
            const floorValidationError = document.getElementById('floorValidationError');
            
            function validateFloors() {
                const currentFloor = parseInt(currentFloorInput.value) || 0;
                const totalFloors = parseInt(totalFloorsInput.value) || 0;
                
                if (currentFloorInput.value && totalFloorsInput.value && currentFloor > totalFloors) {
                    floorValidationError.style.display = 'block';
                    currentFloorInput.classList.add('is-invalid');
                    return false;
                } else {
                    floorValidationError.style.display = 'none';
                    currentFloorInput.classList.remove('is-invalid');
                    return true;
                }
            }
            
            if (currentFloorInput && totalFloorsInput) {
                currentFloorInput.addEventListener('blur', validateFloors);
                totalFloorsInput.addEventListener('blur', validateFloors);
                currentFloorInput.addEventListener('input', validateFloors);
                totalFloorsInput.addEventListener('input', validateFloors);
            }
            
            // 管理費顯示控制
            const managementFeeRadios = document.querySelectorAll('input[name="ManagementFeeIncluded"]');
            const managementFeeContainer = document.getElementById('ManagementFeeAmountContainer');
            
            managementFeeRadios.forEach(function(radio) {
                radio.addEventListener('change', function() {
                    if (this.value === 'false' && this.checked) {
                        managementFeeContainer.style.display = 'block';
                    } else {
                        managementFeeContainer.style.display = 'none';
                    }
                });
            });
            
            // 水費計算方式顯示控制
            const waterFeeTypeSelect = document.getElementById('WaterFeeType');
            const customWaterFeeContainer = document.getElementById('CustomWaterFeeContainer');
            
            if (waterFeeTypeSelect) {
                waterFeeTypeSelect.addEventListener('change', function() {
                    if (this.value === '自訂金額') {
                        customWaterFeeContainer.style.display = 'block';
                    } else {
                        customWaterFeeContainer.style.display = 'none';
                    }
                });
                
                // 初始化顯示狀態
                if (waterFeeTypeSelect.value === '自訂金額') {
                    customWaterFeeContainer.style.display = 'block';
                }
            }
            
            // 電費計算方式顯示控制
            const electricityFeeTypeSelect = document.getElementById('ElectricityFeeType');
            const customElectricityFeeContainer = document.getElementById('CustomElectricityFeeContainer');
            
            if (electricityFeeTypeSelect) {
                electricityFeeTypeSelect.addEventListener('change', function() {
                    if (this.value === '自訂金額') {
                        customElectricityFeeContainer.style.display = 'block';
                    } else {
                        customElectricityFeeContainer.style.display = 'none';
                    }
                });
                
                // 初始化顯示狀態
                if (electricityFeeTypeSelect.value === '自訂金額') {
                    customElectricityFeeContainer.style.display = 'block';
                }
            }
            
            // 清潔費顯示控制
            const cleaningFeeRadios = document.querySelectorAll('input[name="CleaningFeeRequired"]');
            const cleaningFeeAmountContainer = document.getElementById('CleaningFeeAmountContainer');
            
            cleaningFeeRadios.forEach(function(radio) {
                radio.addEventListener('change', function() {
                    if (this.value === 'true' && this.checked) {
                        cleaningFeeAmountContainer.style.display = 'block';
                    } else {
                        cleaningFeeAmountContainer.style.display = 'none';
                    }
                });
            });
            
            // 停車位費用顯示控制（更新為單選邏輯）
            const parkingRadios = document.querySelectorAll('input[name="ParkingAvailable"]');
            const parkingFeeContainer = document.getElementById('ParkingFeeContainer');
            const parkingFeeRequired = document.getElementById('ParkingFeeRequired');
            const parkingFeeAmountContainer = document.getElementById('ParkingFeeAmountContainer');
            const parkingAvailable = document.querySelector('input[name="ParkingAvailable"][value="true"]');
            
            parkingRadios.forEach(function(radio) {
                radio.addEventListener('change', function() {
                    if (this.value === 'true' && this.checked) {
                        parkingFeeContainer.style.display = 'block';
                    } else {
                        parkingFeeContainer.style.display = 'none';
                        parkingFeeRequired.checked = false;
                        parkingFeeAmountContainer.style.display = 'none';
                    }
                });
            });
            
            if (parkingFeeRequired) {
                parkingFeeRequired.addEventListener('change', function() {
                    if (this.checked) {
                        parkingFeeAmountContainer.style.display = 'block';
                    } else {
                        parkingFeeAmountContainer.style.display = 'none';
                    }
                });
            }
            
            // 設備三層階層選擇邏輯
            const subCategoryCheckboxes = document.querySelectorAll('.sub-category-checkbox');
            const detailCategoryCheckboxes = document.querySelectorAll('.detail-category-checkbox');
            
            // 子項勾選邏輯：選擇子項時顯示細項
            subCategoryCheckboxes.forEach(function(checkbox) {
                checkbox.addEventListener('change', function() {
                    const subCategoryId = this.value;
                    const detailContainer = document.getElementById('details_' + subCategoryId);
                    
                    if (this.checked) {
                        // 選擇子項時顯示細項
                        if (detailContainer) {
                            detailContainer.style.display = 'block';
                        }
                        this.closest('.equipment-sub-item').classList.add('selected');
                    } else {
                        // 取消選擇子項時隱藏細項並取消所有細項選擇
                        if (detailContainer) {
                            detailContainer.style.display = 'none';
                            const childCheckboxes = detailContainer.querySelectorAll('.detail-category-checkbox');
                            childCheckboxes.forEach(child => child.checked = false);
                        }
                        this.closest('.equipment-sub-item').classList.remove('selected');
                    }
                });
            });
            
            // 細項選擇邏輯：確保至少選擇一個細項
            detailCategoryCheckboxes.forEach(function(checkbox) {
                checkbox.addEventListener('change', function() {
                    const parentId = this.dataset.parentId;
                    const parentCheckbox = document.querySelector(`input[value="${parentId}"].sub-category-checkbox`);
                    const detailContainer = document.getElementById('details_' + parentId);
                    
                    if (detailContainer) {
                        const checkedDetails = detailContainer.querySelectorAll('.detail-category-checkbox:checked');
                        
                        // 如果沒有選擇任何細項，取消父項選擇
                        if (checkedDetails.length === 0 && parentCheckbox) {
                            parentCheckbox.checked = false;
                            detailContainer.style.display = 'none';
                            parentCheckbox.closest('.equipment-sub-item').classList.remove('selected');
                        }
                        // 如果選擇了細項但父項未選擇，自動選擇父項
                        else if (checkedDetails.length > 0 && parentCheckbox && !parentCheckbox.checked) {
                            parentCheckbox.checked = true;
                            parentCheckbox.closest('.equipment-sub-item').classList.add('selected');
                        }
                    }
                });
            });
            
            // 刊登方案到期日計算
            function calculateExpireDate(days) {
                const now = new Date();
                const expireDate = new Date(now.getFullYear(), now.getMonth(), now.getDate() + days + 1);
                return expireDate.getFullYear() + '-' + 
                       String(expireDate.getMonth() + 1).padStart(2, '0') + '-' + 
                       String(expireDate.getDate()).padStart(2, '0') + ' 00:00';
            }
            
            // 刊登方案選擇邏輯
            const listingPlanRadios = document.querySelectorAll('.listing-plan-radio');
            const selectedPlanDetails = document.getElementById('selectedPlanDetails');
            const planDetailsContent = document.getElementById('planDetailsContent');
            
            listingPlanRadios.forEach(function(radio) {
                radio.addEventListener('change', function() {
                    if (this.checked) {
                        const planCard = this.closest('.listing-plan-card');
                        const planDays = parseInt(planCard.dataset.planDays);
                        const planName = planCard.querySelector('.card-title').textContent;
                        const planCost = planCard.querySelector('.card-text strong').textContent;
                        const expireDate = calculateExpireDate(planDays);
                        
                        // 移除其他卡片的選中狀態
                        document.querySelectorAll('.listing-plan-card').forEach(card => {
                            card.classList.remove('selected');
                        });
                        
                        // 添加當前卡片的選中狀態
                        planCard.classList.add('selected');
                        
                        // 生成詳情內容
                        planDetailsContent.innerHTML = `
                            您選擇的方案刊登日為 <span class="highlight-days">${planDays} 天</span>，預計下架日 ${expireDate}（24 小時制）<br>
                            <span class="highlight-cost">費用總計共 ${planCost} 元</span>
                        `;
                        
                        // 顯示詳情區域
                        selectedPlanDetails.style.display = 'block';
                        
                        // 平滑滾動到詳情區域
                        selectedPlanDetails.scrollIntoView({ 
                            behavior: 'smooth',
                            block: 'nearest'
                        });
                    }
                });
            });
            
            // 初始化已選中的方案
            const checkedPlanRadio = document.querySelector('.listing-plan-radio:checked');
            if (checkedPlanRadio) {
                checkedPlanRadio.dispatchEvent(new Event('change'));
            }
            
            // 預覽按鈕功能
            const previewButton = document.getElementById('previewButton');
            const previewModal = document.getElementById('previewModal');
            const previewContent = document.getElementById('previewContent');
            
            if (previewButton && previewModal && previewContent) {
                previewButton.addEventListener('click', async function(e) {
                    e.preventDefault();
                    
                    try {
                        // 顯示載入狀態
                        previewContent.innerHTML = `
                            <div class="text-center py-5">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">載入中...</span>
                                </div>
                                <p class="mt-2 text-muted">正在生成預覽...</p>
                            </div>
                        `;
                        
                        // 使用 Bootstrap 5.3 最佳實踐
                        const modal = bootstrap.Modal.getOrCreateInstance(previewModal, {
                            backdrop: true,
                            keyboard: true,
                            focus: true
                        });
                        modal.show();
                        
                        // 收集表單資料
                        const formData = collectFormData();
                        
                        // 發送 AJAX 請求
                        const response = await fetch('/Property/Preview', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify(formData)
                        });
                        
                        if (response.ok) {
                            const htmlContent = await response.text();
                            previewContent.innerHTML = htmlContent;
                        } else {
                            throw new Error('預覽請求失敗');
                        }
                        
                    } catch (error) {
                        console.error('預覽錯誤:', error);
                        previewContent.innerHTML = `
                            <div class="text-center py-5">
                                <i class="fas fa-exclamation-triangle fa-3x text-warning mb-3"></i>
                                <h5>預覽載入失敗</h5>
                                <p class="text-muted">請檢查表單資料是否完整，或稍後再試</p>
                                <button type="button" class="btn btn-outline-primary error-close-btn">
                                    關閉
                                </button>
                            </div>
                        `;
                        
                        // 確保錯誤狀態下也能正常關閉
                        const modal = bootstrap.Modal.getInstance(previewModal);
                        if (modal) {
                            const closeBtn = previewContent.querySelector('.error-close-btn');
                            if (closeBtn) {
                                closeBtn.addEventListener('click', () => modal.hide());
                            }
                        }
                    }
                });
            }
            
            // 添加預覽模態框事件監聽器，確保內容清理
            if (previewModal) {
                previewModal.addEventListener('hidden.bs.modal', function () {
                    // 清理內容，準備下次使用
                    const defaultContent = `
                        <div class="text-center py-5">
                            <p class="text-muted">請點擊預覽按鈕查看房源預覽</p>
                        </div>
                    `;
                    previewContent.innerHTML = defaultContent;
                    
                    // 確保 backdrop 完全清理
                    setTimeout(() => {
                        document.querySelectorAll('.modal-backdrop').forEach(el => {
                            if (el) el.remove();
                        });
                        document.body.classList.remove('modal-open');
                        document.body.style.removeProperty('padding-right');
                        document.body.style.removeProperty('overflow');
                        
                        // 🔧 修正：預覽模態框關閉後，重新檢查按鈕狀態
                        console.log('🔄 預覽模態框關閉，重新檢查按鈕狀態');
                        updateSubmitButtonState();
                    }, 100);
                });
                
                // 添加模態框顯示事件監聽器
                previewModal.addEventListener('shown.bs.modal', function () {
                    console.log('預覽模態框已顯示');
                });
                
                // 添加強制清理機制（備用方案）
                window.forceCleanPreviewModal = function() {
                    const modal = bootstrap.Modal.getInstance(previewModal);
                    if (modal) {
                        modal.dispose();
                    }
                    
                    // 清理可能殘留的 backdrop
                    document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
                    document.body.classList.remove('modal-open');
                    document.body.style.paddingRight = '';
                    document.body.style.overflow = '';
                    document.body.style.removeProperty('padding-right');
                };
            }
            
            // ========== 兩階段上傳系統 ==========
            
            // 上傳管理物件（暴露到全域作用域以供表單驗證使用）
            window.UploadManager = {
                tempSessionId: null,
                uploadedImages: [],
                uploadedDocument: null,
                
                // 初始化臨時會話
                async initTempSession() {
                    if (!this.tempSessionId) {
                        this.tempSessionId = this.generateSessionId();
                        document.getElementById('tempSessionId').value = this.tempSessionId;
                        console.log('🔄 初始化臨時會話:', this.tempSessionId);
                    }
                    return this.tempSessionId;
                },
                
                // 生成會話ID
                generateSessionId() {
                    return 'temp_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
                },
                
                // 上傳檔案到臨時區域
                async uploadToTemp(files, category = 'Gallery') {
                    await this.initTempSession();
                    
                    const formData = new FormData();
                    formData.append('tempSessionId', this.tempSessionId);
                    formData.append('category', category);
                    
                    // 添加多個檔案
                    Array.from(files).forEach(file => {
                        formData.append('files', file);
                    });
                    
                    try {
                        const response = await fetch('/api/images/temp-upload', {
                            method: 'POST',
                            headers: {
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: formData
                        });
                        
                        const result = await response.json();
                        
                        if (result.success) {
                            console.log('✅ 檔案上傳成功:', result);
                            return result;
                        } else {
                            console.error('❌ 檔案上傳失敗:', result.message);
                            throw new Error(result.message || '上傳失敗');
                        }
                    } catch (error) {
                        console.error('❌ 上傳過程發生錯誤:', error);
                        throw error;
                    }
                }
            };
            
            // ========== 房源圖片上傳邏輯 ==========
            
            const propertyImageUploadArea = document.getElementById('propertyImageUploadArea');
            const propertyImageFiles = document.getElementById('propertyImageFiles');
            const propertyImagePreview = document.getElementById('propertyImagePreview');
            const propertyImageContainer = document.getElementById('propertyImageContainer');
            const propertyImageUploadProgress = document.getElementById('propertyImageUploadProgress');
            
            // 點擊上傳區域觸發檔案選擇
            propertyImageUploadArea.addEventListener('click', function(e) {
                if (e.target.tagName !== 'BUTTON') {
                    propertyImageFiles.click();
                }
            });
            
            // 拖拽上傳
            propertyImageUploadArea.addEventListener('dragover', function(e) {
                e.preventDefault();
                this.classList.add('dragover');
            });
            
            propertyImageUploadArea.addEventListener('dragleave', function(e) {
                e.preventDefault();
                this.classList.remove('dragover');
            });
            
            propertyImageUploadArea.addEventListener('drop', function(e) {
                e.preventDefault();
                this.classList.remove('dragover');
                
                const files = Array.from(e.dataTransfer.files).filter(f => f.type.startsWith('image/'));
                if (files.length > 0) {
                    handlePropertyImageUpload(files);
                }
            });
            
            // 檔案選擇處理
            propertyImageFiles.addEventListener('change', function() {
                const files = Array.from(this.files).filter(f => f.type.startsWith('image/'));
                if (files.length > 0) {
                    handlePropertyImageUpload(files);
                }
            });
            
            // 處理房源圖片上傳
            async function handlePropertyImageUpload(files) {
                try {
                    // 檢查總數量限制（包含已上傳的圖片）
                    const maxImages = 15;
                    const currentImageCount = UploadManager.uploadedImages.length;
                    const newFilesArray = Array.from(files);
                    
                    // 如果超過限制，只取前面可以上傳的數量
                    const availableSlots = maxImages - currentImageCount;
                    if (availableSlots <= 0) {
                        alert(`最多僅可上傳 ${maxImages} 張圖片！目前已有 ${currentImageCount} 張圖片。`);
                        return;
                    }
                    
                    let filesToUpload = newFilesArray;
                    if (newFilesArray.length > availableSlots) {
                        filesToUpload = newFilesArray.slice(0, availableSlots);
                        alert(`最多僅可上傳 ${maxImages} 張圖片！已選取前 ${availableSlots} 張圖片進行上傳。`);
                    }
                    
                    // 檔案驗證
                    const validFiles = [];
                    for (const file of filesToUpload) {
                        if (file.size > 2 * 1024 * 1024) { // 2MB
                            alert(`檔案 ${file.name} 超過 2MB 限制`);
                            continue;
                        }
                        if (!['image/jpeg', 'image/png', 'image/webp'].includes(file.type)) {
                            alert(`檔案 ${file.name} 格式不支援`);
                            continue;
                        }
                        validFiles.push(file);
                    }
                    
                    if (validFiles.length === 0) return;
                    
                    // 顯示上傳進度
                    propertyImageUploadProgress.style.display = 'block';
                    
                    // 上傳到臨時區域
                    const result = await UploadManager.uploadToTemp(validFiles, 'Gallery');
                    
                    // 檢查上傳結果並更新已上傳的圖片列表
                    // API 回傳的是 images 陣列，不是 uploadResults
                    if (result.images && result.images.length > 0) {
                        // 設定 TempSessionId 到隱藏欄位
                        if (result.tempSessionId) {
                            const tempSessionIdInput = document.getElementById('tempSessionIdInput');
                            if (tempSessionIdInput) {
                                tempSessionIdInput.value = result.tempSessionId;
                                console.log('🔑 設定 TempSessionId:', result.tempSessionId);
                            }
                        }
                        
                        // 為每個上傳的圖片添加本地預覽 URL
                        const imagesWithLocalUrl = result.images.map((image, index) => {
                            const originalFile = validFiles[index];
                            return {
                                ...image,
                                localPreviewUrl: originalFile ? URL.createObjectURL(originalFile) : null,
                                originalFile: originalFile,
                                isNewUpload: true // 標記為新上傳，用於動畫效果
                            };
                        });
                        UploadManager.uploadedImages = UploadManager.uploadedImages.concat(imagesWithLocalUrl);
                        
                        // 更新狀態指示器
                        updateImageInfoStatus();
                    } else {
                        throw new Error('圖片上傳失敗：沒有收到上傳結果');
                    }
                    
                    // 更新預覽顯示
                    updatePropertyImagePreview();
                    
                    // 隱藏上傳進度
                    propertyImageUploadProgress.style.display = 'none';
                    
                } catch (error) {
                    console.error('圖片上傳失敗:', error);
                    alert('圖片上傳失敗: ' + error.message);
                    propertyImageUploadProgress.style.display = 'none';
                }
            }
            
            // 更新房源圖片預覽
            function updatePropertyImagePreview() {
                const currentCount = UploadManager.uploadedImages.length;
                const maxImages = 15;
                
                // 更新上傳計數器
                updateUploadCounter(currentCount, maxImages);
                
                if (currentCount > 0) {
                    propertyImagePreview.style.display = 'block';
                    propertyImageContainer.innerHTML = '';
                    
                    UploadManager.uploadedImages.forEach((image, index) => {
                        const previewCard = document.createElement('div');
                        previewCard.className = 'image-preview-card';
                        previewCard.draggable = true;
                        previewCard.dataset.index = index;
                        
                        // 區分現有圖片和新上傳圖片
                        const isExisting = image && (image.isExisting === true);
                        const deleteAction = isExisting ? 
                            `markImageForDeletion(${index})` : 
                            `removePropertyImage(${index})`;
                        
                        const cardClass = isExisting ? 'existing-image' : 'new-image';
                        
                        // 優先使用本地預覽 URL，然後是 API 回傳的 URL
                        const imageUrl = image.localPreviewUrl || image.tempUrl || image.PreviewUrl || image.blobUrl || '/images/default-picture.png';
                        const fileName = image.originalFileName || image.FileName || '未知檔案';
                        
                        previewCard.innerHTML = `
                            <img src="${imageUrl}" alt="${fileName}" loading="lazy">
                            <button type="button" class="remove-btn ${cardClass}" onclick="${deleteAction}" 
                                    title="${isExisting ? '標記刪除' : '移除圖片'}">
                                <i class="fas fa-${isExisting ? 'trash' : 'times'}"></i>
                            </button>
                            ${isExisting ? '<div class="existing-badge">現有</div>' : ''}
                            ${image.markedForDeletion ? '<div class="deletion-overlay">已標記刪除</div>' : ''}
                        `;
                        
                        // 為新上傳的圖片添加成功動畫
                        if (image.isNewUpload) {
                            previewCard.classList.add('upload-success');
                            // 移除標記以避免重複動畫
                            image.isNewUpload = false;
                        }
                        
                        if (image.markedForDeletion) {
                            previewCard.classList.add('marked-for-deletion');
                        }
                        
                        propertyImageContainer.appendChild(previewCard);
                    });
                    
                    // 添加拖曳排序功能
                    setupImageDragAndDrop();
                } else {
                    propertyImagePreview.style.display = 'none';
                }
            }
            
            // 設置圖片拖曳排序功能（增強版）
            function setupImageDragAndDrop() {
                let draggedElement = null;
                let draggedIndex = null;
                
                const cards = propertyImageContainer.querySelectorAll('.image-preview-card');
                
                cards.forEach(card => {
                    // 添加拖曳控制指示
                    if (!card.querySelector('.drag-handle')) {
                        const dragHandle = document.createElement('div');
                        dragHandle.className = 'drag-handle';
                        dragHandle.innerHTML = '⋮⋮';
                        dragHandle.title = '拖曳以排序';
                        card.appendChild(dragHandle);
                    }
                    
                    card.addEventListener('dragstart', (e) => {
                        draggedElement = card;
                        draggedIndex = parseInt(card.dataset.index);
                        
                        // 添加拖曳樣式
                        card.classList.add('dragging');
                        propertyImageContainer.classList.add('drop-zone-active');
                        
                        e.dataTransfer.effectAllowed = 'move';
                        e.dataTransfer.setData('text/html', card.outerHTML);
                        
                        console.log('🎯 開始拖曳圖片:', draggedIndex);
                    });
                    
                    card.addEventListener('dragend', (e) => {
                        // 清除拖曳樣式
                        card.classList.remove('dragging');
                        propertyImageContainer.classList.remove('drop-zone-active');
                        
                        // 清除所有拖曳回饋樣式
                        document.querySelectorAll('.image-preview-card').forEach(c => {
                            c.classList.remove('drag-over');
                        });
                        
                        draggedElement = null;
                        draggedIndex = null;
                    });
                    
                    card.addEventListener('dragenter', (e) => {
                        e.preventDefault();
                        if (draggedElement && draggedElement !== card) {
                            card.classList.add('drag-over');
                        }
                    });
                    
                    card.addEventListener('dragleave', (e) => {
                        e.preventDefault();
                        // 只有當滑鼠真正離開元素時才移除樣式
                        if (!card.contains(e.relatedTarget)) {
                            card.classList.remove('drag-over');
                        }
                    });
                    
                    card.addEventListener('dragover', (e) => {
                        e.preventDefault();
                        e.dataTransfer.dropEffect = 'move';
                    });
                    
                    card.addEventListener('drop', (e) => {
                        e.preventDefault();
                        card.classList.remove('drag-over');
                        
                        if (draggedElement && draggedElement !== card) {
                            const targetIndex = parseInt(card.dataset.index);
                            
                            console.log('📍 拖放目標:', draggedIndex, '->', targetIndex);
                            
                            // 交換陣列中的位置
                            const draggedImage = UploadManager.uploadedImages[draggedIndex];
                            UploadManager.uploadedImages.splice(draggedIndex, 1);
                            UploadManager.uploadedImages.splice(targetIndex, 0, draggedImage);
                            
                            // 重新渲染圖片預覽
                            updatePropertyImagePreview();
                            
                            // 顯示成功回饋
                            showSortSuccessMessage(draggedIndex + 1, targetIndex + 1);
                            
                            console.log('🔄 圖片順序已調整');
                        }
                    });
                });
            }
            
            // 顯示排序成功訊息
            function showSortSuccessMessage(fromPos, toPos) {
                const message = document.createElement('div');
                message.className = 'alert alert-success alert-dismissible fade show position-fixed';
                message.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
                message.innerHTML = `
                    <i class="fas fa-check-circle"></i>
                    圖片已從第 ${fromPos} 位移動到第 ${toPos} 位
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
                
                document.body.appendChild(message);
                
                // 3秒後自動移除
                setTimeout(() => {
                    if (message.parentNode) {
                        message.remove();
                    }
                }, 3000);
            }
            
            // 更新上傳計數器
            function updateUploadCounter(currentCount, maxCount) {
                // 尋找或創建計數器
                let counter = document.querySelector('.upload-counter');
                if (!counter) {
                    counter = document.createElement('div');
                    counter.className = 'upload-counter';
                    
                    // 插入到圖片上傳區域之前
                    const uploadArea = document.querySelector('.image-upload-area');
                    if (uploadArea && uploadArea.parentNode) {
                        uploadArea.parentNode.insertBefore(counter, uploadArea);
                    }
                }
                
                // 更新內容和樣式
                counter.innerHTML = `
                    <i class="fas fa-images"></i>
                    已上傳圖片: ${currentCount} / ${maxCount} 張
                `;
                
                // 根據上傳數量調整樣式
                counter.className = 'upload-counter';
                if (currentCount >= maxCount) {
                    counter.classList.add('at-limit');
                } else if (currentCount >= maxCount - 3) {
                    counter.classList.add('near-limit');
                }
                
                // 更新上傳區域的可用性
                const uploadArea = document.querySelector('.image-upload-area');
                const uploadInput = document.querySelector('#propertyImages');
                
                if (currentCount >= maxCount) {
                    if (uploadArea) {
                        uploadArea.style.opacity = '0.5';
                        uploadArea.style.pointerEvents = 'none';
                        uploadArea.querySelector('.upload-text').innerHTML = 
                            '<strong>已達圖片上傳上限</strong><br>請先移除部分圖片後再上傳';
                    }
                    if (uploadInput) uploadInput.disabled = true;
                } else {
                    if (uploadArea) {
                        uploadArea.style.opacity = '1';
                        uploadArea.style.pointerEvents = 'auto';
                        const remainingSlots = maxCount - currentCount;
                        uploadArea.querySelector('.upload-text').innerHTML = 
                            `<strong>點擊或拖拽圖片到此處上傳</strong><br>還可上傳 ${remainingSlots} 張圖片`;
                    }
                    if (uploadInput) uploadInput.disabled = false;
                }
            }
            
            // 移除房源圖片（新上傳的圖片）
            function removePropertyImage(index) {
                const card = document.querySelector(`.image-preview-card[data-index="${index}"]`);
                
                if (card) {
                    // 添加移除動畫
                    card.classList.add('remove-animation');
                    
                    // 等待動畫完成後再移除
                    setTimeout(() => {
                        UploadManager.uploadedImages.splice(index, 1);
                        updatePropertyImagePreview();
                        updateImageInfoStatus();
                        console.log('🗑️ 移除圖片，目前有', UploadManager.uploadedImages.length, '張圖片');
                    }, 400); // 配合 CSS 動畫時間
                } else {
                    // 如果找不到卡片，直接移除
                    UploadManager.uploadedImages.splice(index, 1);
                    updatePropertyImagePreview();
                    updateImageInfoStatus();
                }
            }
            
            // 標記現有圖片為刪除（編輯模式）
            function markImageForDeletion(index) {
                const image = UploadManager.uploadedImages[index];
                if (image && image.isExisting) {
                    image.markedForDeletion = !image.markedForDeletion;
                    updatePropertyImagePreview();
                    
                    // 更新要刪除的圖片列表
                    if (!UploadManager.imagesToDelete) {
                        UploadManager.imagesToDelete = [];
                    }
                    
                    if (image.markedForDeletion) {
                        UploadManager.imagesToDelete.push(image.imageId);
                    } else {
                        const deleteIndex = UploadManager.imagesToDelete.indexOf(image.imageId);
                        if (deleteIndex > -1) {
                            UploadManager.imagesToDelete.splice(deleteIndex, 1);
                        }
                    }
                    
                    console.log('🗑️ 標記刪除圖片:', image.originalFileName, '| 待刪除:', UploadManager.imagesToDelete);
                }
            }
            
            // 暴露到全域作用域
            window.removePropertyImage = removePropertyImage;
            window.markImageForDeletion = markImageForDeletion;
            
            // ========== PDF 文件上傳邏輯 ==========
            
            const documentUploadArea = document.getElementById('documentUploadArea');
            const documentFile = document.getElementById('documentFile');
            const documentPreview = document.getElementById('documentPreview');
            const documentContainer = document.getElementById('documentContainer');
            const documentUploadProgress = document.getElementById('documentUploadProgress');
            
            // 點擊上傳區域觸發檔案選擇
            documentUploadArea.addEventListener('click', function(e) {
                if (e.target.tagName !== 'BUTTON') {
                    documentFile.click();
                }
            });
            
            // 拖拽上傳
            documentUploadArea.addEventListener('dragover', function(e) {
                e.preventDefault();
                this.classList.add('dragover');
            });
            
            documentUploadArea.addEventListener('dragleave', function(e) {
                e.preventDefault();
                this.classList.remove('dragover');
            });
            
            documentUploadArea.addEventListener('drop', function(e) {
                e.preventDefault();
                this.classList.remove('dragover');
                
                const files = Array.from(e.dataTransfer.files).filter(f => f.type === 'application/pdf');
                if (files.length > 0) {
                    handleDocumentUpload(files[0]); // 只取第一個 PDF
                }
            });
            
            // 檔案選擇處理
            documentFile.addEventListener('change', function() {
                if (this.files.length > 0) {
                    handleDocumentUpload(this.files[0]);
                }
            });
            
            // 處理 PDF 文件上傳
            async function handleDocumentUpload(file) {
                try {
                    // 檔案驗證
                    if (file.size > 10 * 1024 * 1024) { // 10MB
                        alert('PDF 檔案超過 10MB 限制');
                        return;
                    }
                    
                    if (file.type !== 'application/pdf') {
                        alert('只支援 PDF 格式的文件');
                        return;
                    }
                    
                    // 顯示上傳進度
                    documentUploadProgress.style.display = 'block';
                    
                    // 上傳到臨時區域
                    const result = await UploadManager.uploadToTemp([file], 'Document');
                    
                    // 檢查上傳結果並更新已上傳的文件
                    // API 回傳的是 images 陣列，不是 uploadResults
                    if (result.images && result.images.length > 0) {
                        // 設定 TempSessionId 到隱藏欄位
                        if (result.tempSessionId) {
                            const tempSessionIdInput = document.getElementById('tempSessionIdInput');
                            if (tempSessionIdInput) {
                                tempSessionIdInput.value = result.tempSessionId;
                                console.log('🔑 設定 TempSessionId (PDF):', result.tempSessionId);
                            }
                        }
                        
                        UploadManager.uploadedDocument = result.images[0];
                        
                        // 更新狀態指示器
                        updateImageInfoStatus();
                    } else {
                        throw new Error('PDF 上傳失敗：沒有收到上傳結果');
                    }
                    
                    // 更新預覽顯示
                    updateDocumentPreview();
                    
                    // 隱藏上傳進度
                    documentUploadProgress.style.display = 'none';
                    
                } catch (error) {
                    console.error('PDF 上傳失敗:', error);
                    alert('PDF 上傳失敗: ' + error.message);
                    documentUploadProgress.style.display = 'none';
                }
            }
            
            // 更新 PDF 文件預覽
            function updateDocumentPreview() {
                if (UploadManager.uploadedDocument) {
                    documentPreview.style.display = 'block';
                    documentContainer.innerHTML = `
                        <div class="document-preview-item">
                            <div class="file-icon">
                                <i class="fas fa-file-pdf"></i>
                            </div>
                            <div class="file-info flex-grow-1">
                                <h6>${UploadManager.uploadedDocument.originalFileName || UploadManager.uploadedDocument.FileName}</h6>
                                <small class="text-muted">
                                    ${((UploadManager.uploadedDocument.fileSizeBytes || UploadManager.uploadedDocument.FileSizeBytes) / 1024 / 1024).toFixed(2)} MB
                                </small>
                            </div>
                            <button type="button" class="remove-btn" onclick="removeDocument()">
                                <i class="fas fa-times"></i> 移除
                            </button>
                        </div>
                    `;
                } else {
                    documentPreview.style.display = 'none';
                }
            }
            
            // 移除 PDF 文件
            function removeDocument() {
                UploadManager.uploadedDocument = null;
                
                // 重置文件輸入元素，允許重新上傳相同檔案
                const documentFileInput = document.getElementById('documentFile');
                if (documentFileInput) {
                    documentFileInput.value = '';
                }
                
                updateDocumentPreview();
                updateImageInfoStatus();
                
                console.log('🗑️ PDF 文件已移除，可重新上傳');
            }
            
            // 更新房屋照片和證明文件狀態指示器
            function updateImageInfoStatus() {
                // 更新房屋照片狀態
                const imageInfoStatus = document.getElementById('imageInfo-status');
                if (imageInfoStatus) {
                    const hasImages = UploadManager.uploadedImages && UploadManager.uploadedImages.length > 0;
                    
                    if (hasImages) {
                        imageInfoStatus.innerHTML = '<i class="fas fa-check-circle text-success small"></i>';
                        console.log('✅ 房屋照片已上傳，狀態更新為完成');
                    } else {
                        imageInfoStatus.innerHTML = '<i class="fas fa-circle text-muted small"></i>';
                        console.log('⚪ 房屋照片未上傳，狀態為預設');
                    }
                }
                
                // 更新房屋所有權證明文件狀態
                const documentInfoStatus = document.getElementById('documentInfo-status');
                if (documentInfoStatus) {
                    const hasDocument = UploadManager.uploadedDocument !== null && UploadManager.uploadedDocument !== undefined;
                    
                    if (hasDocument) {
                        documentInfoStatus.innerHTML = '<i class="fas fa-check-circle text-success small"></i>';
                        console.log('✅ 房屋所有權證明已上傳，狀態更新為完成');
                    } else {
                        documentInfoStatus.innerHTML = '<i class="fas fa-circle text-muted small"></i>';
                        console.log('⚪ 房屋所有權證明未上傳，狀態為預設');
                    }
                }
            }
            
            // 暴露到全域作用域
            window.removeDocument = removeDocument;
            
            // ========== 編輯模式：載入現有圖片 ==========
            
            @if (Model.IsEditMode && Model.PropertyData.ExistingImages.Any())
            {
                <text>
                // 編輯模式：載入現有圖片
                console.log('🔄 編輯模式：載入現有圖片');
                
                @foreach (var existingImage in Model.PropertyData.ExistingImages.Where(img => img.Category == ImageCategory.Gallery))
                {
                    <text>
                    // 載入現有圖片: @existingImage.OriginalFileName
                    UploadManager.uploadedImages.push({
                        imageGuid: '@existingImage.ImageGuid',
                        originalFileName: '@existingImage.OriginalFileName',
                        tempUrl: '@existingImage.ImageUrls["medium"]',
                        isExisting: true,
                        imageId: @existingImage.ImageId,
                        displayOrder: @(existingImage.DisplayOrder ?? 0)
                    });
                    </text>
                }
                
                // 更新圖片預覽顯示
                updatePropertyImagePreview();
                
                @if (Model.PropertyData.ExistingImages.Any(img => img.Category == ImageCategory.Document))
                {
                    var existingDoc = Model.PropertyData.ExistingImages.First(img => img.Category == ImageCategory.Document);
                    <text>
                    // 載入現有 PDF 文件: @existingDoc.OriginalFileName
                    UploadManager.uploadedDocument = {
                        imageGuid: '@existingDoc.ImageGuid',
                        originalFileName: '@existingDoc.OriginalFileName',
                        fileSizeBytes: 0, // 暫時設為 0，實際大小需要從 API 取得
                        isExisting: true,
                        imageId: @existingDoc.ImageId
                    };
                    
                    // 更新 PDF 預覽顯示
                    updateDocumentPreview();
                    </text>
                }
                </text>
            }
            
            // 初始化頁面狀態
            // 觸發管理費狀態檢查
            const checkedManagementFee = document.querySelector('input[name="ManagementFeeIncluded"]:checked');
            if (checkedManagementFee && checkedManagementFee.value === 'false') {
                managementFeeContainer.style.display = 'block';
            }
            
            // 觸發停車位狀態檢查
            if (parkingAvailable.checked) {
                parkingFeeContainer.style.display = 'block';
                if (parkingFeeRequired.checked) {
                    parkingFeeAmountContainer.style.display = 'block';
                }
            }
            
            // 初始化設備選擇狀態
            const equipmentCheckboxes = document.querySelectorAll('.sub-category-checkbox, .detail-category-checkbox');
            equipmentCheckboxes.forEach(function(checkbox) {
                const equipmentItem = checkbox.closest('.equipment-sub-item');
                if (checkbox.checked) {
                    equipmentItem?.classList.add('selected');
                }
            });
            
            // 初始化守則動態欄位功能
            initializeRulesDynamicFields();
            
            // 模態框和按鈕邏輯
            initializeModalLogic();
            
            // 步驟導航邏輯
            initializeStepNavigation();
            
            // 初始化狀態更新
            setTimeout(() => {
                if (typeof updateImageInfoStatus === 'function') {
                    updateImageInfoStatus();
                }
            }, 100);
            
            // 初始化城市區域選擇
            if (citySelect.value) {
                citySelect.dispatchEvent(new Event('change'));
                
                // 如果有預設的區域值，選中它
                const savedDistrictId = '@(Model.PropertyData?.DistrictId ?? 0)';
                if (savedDistrictId && savedDistrictId !== '0') {
                    setTimeout(function() {
                        districtSelect.value = savedDistrictId;
                    }, 100);
                }
            }
        });
        
        /**
         * 初始化模態框邏輯
         */
        function initializeModalLogic() {
            const previewButton = document.getElementById('previewButton');
            const cancelButton = document.getElementById('cancelButton');
            const submitButton = document.getElementById('submitButton');
            const finalSubmitButton = document.getElementById('finalSubmitButton');
            
            // 預覽按鈕
            previewButton.addEventListener('click', function() {
                generatePreview();
                const previewModal = new bootstrap.Modal(document.getElementById('previewModal'));
                previewModal.show();
            });
            
            // 取消發佈按鈕
            cancelButton.addEventListener('click', function() {
                const cancelModal = new bootstrap.Modal(document.getElementById('cancelModal'));
                cancelModal.show();
            });
            
            // 立即發佈按鈕
            submitButton.addEventListener('click', function(e) {
                e.preventDefault();
                if (validateForm()) {
                    const submitModal = new bootstrap.Modal(document.getElementById('submitConfirmModal'));
                    submitModal.show();
                }
            });
            
            // 最終提交按鈕
            finalSubmitButton.addEventListener('click', function() {
                const form = document.querySelector('#propertyCreateForm');
                if (form) {
                    console.log('🚀 準備提交表單');
                    
                    // 檢查上傳狀態
                    const tempSessionId = document.getElementById('tempSessionIdInput')?.value;
                    console.log('🔑 TempSessionId:', tempSessionId || '(未設定)');
                    console.log('🖼️ 已上傳圖片數量:', UploadManager.uploadedImages.length);
                    console.log('📄 已上傳文件:', UploadManager.uploadedDocument ? '有' : '無');
                    
                    // 使用統一的表單驗證邏輯
                    if (validateForm(true)) {
                        console.log('✅ 最終驗證通過，準備添加圖片順序資料');
                        
                        // 添加圖片順序資料到表單
                        addImageOrderDataToForm(form);
                        
                        console.log('✅ 圖片順序資料已添加，提交表單');
                        form.submit();
                    } else {
                        console.warn('❌ 最終驗證失敗，請檢查表單');
                    }
                } else {
                    console.error('找不到表單元素，無法提交');
                }
            });
            
            // 表單驗證和按鈕狀態更新
            document.addEventListener('input', updateSubmitButtonState);
            document.addEventListener('change', updateSubmitButtonState);
            
            // 初始化按鈕狀態
            updateSubmitButtonState();
        }
        
        /**
         * 生成預覽內容
         */
        function generatePreview() {
            const previewContent = document.getElementById('previewContent');
            const formData = collectFormDataForPreview();
            
            previewContent.innerHTML = `
                <div class="property-preview">
                    <div class="row">
                        <div class="col-md-8">
                            <h4>${formData.title || '(尚未輸入標題)'}</h4>
                            <div class="mb-3">
                                <h5 class="text-primary">NT$ ${formData.monthlyRent ? Number(formData.monthlyRent).toLocaleString() : '0'} <small class="text-muted">/月</small></h5>
                            </div>
                            <p><i class="fas fa-map-marker-alt me-2"></i>${formData.address || '(尚未輸入地址)'}</p>
                            <p><i class="fas fa-home me-2"></i>${formData.roomCount || 0} 房 ${formData.livingRoomCount || 0} 廳 ${formData.bathroomCount || 0} 衛 | ${formData.area || 0} 坪</p>
                            <p><i class="fas fa-building me-2"></i>${formData.currentFloor || 0} 樓 / ${formData.totalFloors || 0} 層</p>
                            ${formData.description ? '<div class="mt-3"><h6>房源描述</h6><p>' + formData.description + '</p></div>' : ''}
                        </div>
                        <div class="col-md-4">
                            <div class="border rounded p-3">
                                <h6>費用資訊</h6>
                                <p>押金：NT$ ${formData.depositAmount ? Number(formData.depositAmount).toLocaleString() : '0'}</p>
                                <p>押金月數：${formData.depositMonths || 0} 個月</p>
                                ${formData.managementFeeIncluded === 'false' ? '<p>管理費：NT$ ' + (Number(formData.managementFeeAmount || 0).toLocaleString()) + '/月</p>' : '<p>管理費：已包含</p>'}
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }
        
        /**
         * 收集表單資料用於預覽
         */
        function collectFormDataForPreview() {
            const form = document.querySelector('#propertyCreateForm');
            if (!form) {
                console.error('collectFormDataForPreview: 找不到表單元素');
                return {};
            }
            const formData = new FormData(form);
            const data = {};
            
            for (let [key, value] of formData.entries()) {
                data[key] = value;
            }
            
            // 組合地址
            const citySelect = document.getElementById('CityId');
            const districtSelect = document.getElementById('DistrictId');
            const cityName = citySelect.selectedOptions[0]?.text || '';
            const districtName = districtSelect.selectedOptions[0]?.text || '';
            const addressLine = data.AddressLine || '';
            
            data.address = `${cityName}${districtName}${addressLine}`;
            
            return data;
        }
        
        /**
         * 表單驗證（只在提交時顯示錯誤）
         */
        function validateForm(showErrors = true) {
            console.log('🔍 [validateForm] 開始表單驗證, showErrors:', showErrors);
            
            const requiredFields = [
                'Title', 'CityId', 'DistrictId', 'AddressLine', 
                'MonthlyRent', 'DepositAmount', 'RoomCount', 
                'LivingRoomCount', 'BathroomCount', 'Area',
                'CurrentFloor', 'TotalFloors', 'DepositMonths',
                'MinimumRentalMonths', 'WaterFeeType', 'ElectricityFeeType'
            ];
            
            let isValid = true;
            let errorMessages = [];
            
            // 檢查基本必填欄位
            requiredFields.forEach(fieldName => {
                const field = document.querySelector(`[name="${fieldName}"]`);
                if (field && (!field.value || field.value.trim() === '')) {
                    isValid = false;
                    if (showErrors) {
                        errorMessages.push(`${fieldName}: 此欄位為必填`);
                        console.log(`❌ [validateForm] 必填欄位缺失: ${fieldName}`);
                    }
                }
            });
            
            // 檢查必選的 radio 按鈕組
            const radioGroups = [
                { name: 'ManagementFeeIncluded', label: '管理費' },
                { name: 'CleaningFeeRequired', label: '清潔費' },
                { name: 'ParkingAvailable', label: '停車位' }
            ];
            
            radioGroups.forEach(group => {
                const checkedRadio = document.querySelector(`input[name="${group.name}"]:checked`);
                if (!checkedRadio) {
                    isValid = false;
                    if (showErrors) {
                        errorMessages.push(`${group.label}: 請選擇一個選項`);
                        console.log(`❌ [validateForm] 未選擇 radio: ${group.name}`);
                    }
                }
            });
            
            // 檢查設備選擇（至少選擇一個）
            const selectedEquipment = document.querySelectorAll('input[name="SelectedEquipmentIds"]:checked');
            if (selectedEquipment.length === 0) {
                isValid = false;
                if (showErrors) {
                    errorMessages.push('設備與服務: 請至少選擇一項設備或服務');
                    console.log('❌ [validateForm] 未選擇任何設備');
                }
            }
            
            // 檢查刊登方案選擇
            const selectedPlan = document.querySelector('input[name="ListingPlanId"]:checked');
            if (!selectedPlan) {
                isValid = false;
                if (showErrors) {
                    errorMessages.push('刊登方案: 請選擇一個刊登方案');
                    console.log('❌ [validateForm] 未選擇刊登方案');
                }
            }
            
            // ✨ 重要：檢查 TempSessionId（兩階段上傳的核心）
            const tempSessionIdInput = document.getElementById('tempSessionIdInput');
            const tempSessionId = tempSessionIdInput ? tempSessionIdInput.value : '';
            
            if (showErrors) {
                console.log(`🔍 [validateForm] TempSessionId 檢查: '${tempSessionId}'`);
            }
            
            if (!tempSessionId || tempSessionId.trim() === '') {
                isValid = false;
                if (showErrors) {
                    errorMessages.push('檔案上傳: 請先上傳房源圖片和房屋所有權證明文件');
                    console.log('❌ [validateForm] TempSessionId 為空，表示沒有上傳檔案');
                }
            } else if (showErrors) {
                console.log('✅ [validateForm] TempSessionId 存在，檔案上傳完成');
            }
            
            // 檢查圖片上傳數量（使用 UploadManager 的實際數據）
            const uploadedImageCount = UploadManager.uploadedImages ? UploadManager.uploadedImages.length : 0;
            if (showErrors) {
                console.log(`🔍 [validateForm] 已上傳圖片數量: ${uploadedImageCount}`);
                console.log(`🔍 [validateForm] UploadManager.uploadedImages:`, UploadManager.uploadedImages);
            }
            
            if (uploadedImageCount === 0) {
                isValid = false;
                if (showErrors) {
                    errorMessages.push('房源圖片: 請至少上傳一張房源圖片');
                    console.log('❌ [validateForm] 沒有上傳任何圖片');
                }
            }
            
            // 檢查 PDF 文件上傳（使用 UploadManager 的實際數據）
            const hasDocument = UploadManager.uploadedDocument !== null && UploadManager.uploadedDocument !== undefined;
            if (showErrors) {
                console.log(`🔍 [validateForm] PDF 上傳狀態: ${hasDocument}`);
                console.log(`🔍 [validateForm] UploadManager.uploadedDocument:`, UploadManager.uploadedDocument);
            }
            
            if (!hasDocument) {
                isValid = false;
                if (showErrors) {
                    errorMessages.push('房屋所有權證明: 請上傳房屋所有權證明文件（PDF 格式）');
                    console.log('❌ [validateForm] 沒有上傳 PDF 文件');
                }
            }
            
            // 只有在 showErrors=true 且有錯誤時才顯示錯誤訊息
            if (showErrors) {
                if (!isValid) {
                    console.log('❌ [validateForm] 表單驗證失敗，錯誤列表:', errorMessages);
                    showValidationErrors(errorMessages);
                } else {
                    console.log('✅ [validateForm] 表單驗證通過');
                    hideValidationErrors();
                }
            }
            
            return isValid;
        }
        
        /**
         * 顯示驗證錯誤訊息
         */
        function showValidationErrors(errors) {
            // 移除舊的錯誤訊息
            const existingAlert = document.querySelector('.validation-errors-alert');
            if (existingAlert) {
                existingAlert.remove();
            }
            
            // 創建新的錯誤警告
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-danger validation-errors-alert';
            alertDiv.style.marginTop = '20px';
            
            let alertContent = '<h6><i class="bi bi-exclamation-triangle-fill"></i> 表單驗證失敗，請檢查以下項目：</h6><ul>';
            errors.forEach(error => {
                alertContent += `<li>${error}</li>`;
            });
            alertContent += '</ul>';
            
            alertDiv.innerHTML = alertContent;
            
            // 插入到表單頂部
            const form = document.getElementById('propertyCreateForm');
            if (form) {
                form.insertBefore(alertDiv, form.firstChild);
                
                // 滾動到錯誤訊息處
                alertDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        }
        
        /**
         * 隱藏驗證錯誤訊息
         */
        function hideValidationErrors() {
            const existingAlert = document.querySelector('.validation-errors-alert');
            if (existingAlert) {
                existingAlert.remove();
            }
        }
        
        /**
         * 添加圖片順序資料到表單
         */
        function addImageOrderDataToForm(form) {
            try {
                // 移除任何現有的圖片順序欄位
                const existingOrderFields = form.querySelectorAll('input[name^="ImageOrder"]');
                existingOrderFields.forEach(field => field.remove());
                
                console.log('🔄 準備添加圖片順序資料，當前圖片順序:');
                
                // 根據 UploadManager.uploadedImages 的順序添加隱藏欄位
                UploadManager.uploadedImages.forEach((image, index) => {
                    const orderInput = document.createElement('input');
                    orderInput.type = 'hidden';
                    orderInput.name = `ImageOrder[${index}]`;
                    orderInput.value = image.imageGuid;
                    form.appendChild(orderInput);
                    
                    console.log(`  順序 ${index + 1}: ${image.imageGuid} (${image.fileName})`);
                });
                
                console.log('✅ 圖片順序資料已添加到表單');
            } catch (error) {
                console.error('❌ 添加圖片順序資料時發生錯誤:', error);
            }
        }
        
        /**
         * 更新提交按鈕狀態（靜默檢查，不顯示錯誤）
         */
        function updateSubmitButtonState() {
            const submitButton = document.getElementById('submitButton');
            const isFormValid = validateFormSilent(); // 使用靜默版本
            
            if (isFormValid) {
                submitButton.classList.add('active');
                submitButton.disabled = false; // 啟用按鈕
            } else {
                submitButton.classList.remove('active');
                submitButton.disabled = true; // 禁用按鈕
            }
        }
        
        /**
         * 靜默表單驗證（不顯示錯誤訊息）
         */
        function validateFormSilent() {
            const requiredFields = [
                'Title', 'CityId', 'DistrictId', 'AddressLine', 
                'MonthlyRent', 'DepositAmount', 'RoomCount', 
                'LivingRoomCount', 'BathroomCount', 'Area',
                'CurrentFloor', 'TotalFloors', 'DepositMonths',
                'MinimumRentalMonths', 'WaterFeeType', 'ElectricityFeeType'
            ];
            
            let isValid = true;
            
            // 檢查基本必填欄位
            requiredFields.forEach(fieldName => {
                const field = document.querySelector(`[name="${fieldName}"]`);
                if (field && (!field.value || field.value.trim() === '')) {
                    isValid = false;
                }
            });
            
            // 檢查必選的 radio 按鈕組
            const radioGroups = ['ManagementFeeIncluded', 'CleaningFeeRequired', 'ParkingAvailable'];
            radioGroups.forEach(groupName => {
                const checkedRadio = document.querySelector(`input[name="${groupName}"]:checked`);
                if (!checkedRadio) {
                    isValid = false;
                }
            });
            
            // 檢查設備選擇
            const selectedEquipment = document.querySelectorAll('input[name="SelectedEquipmentIds"]:checked');
            if (selectedEquipment.length === 0) {
                isValid = false;
            }
            
            // 檢查刊登方案選擇
            const selectedPlan = document.querySelector('input[name="ListingPlanId"]:checked');
            if (!selectedPlan) {
                isValid = false;
            }
            
            // 檢查檔案上傳
            const tempSessionIdInput = document.getElementById('tempSessionIdInput');
            const tempSessionId = tempSessionIdInput ? tempSessionIdInput.value : '';
            if (!tempSessionId || tempSessionId.trim() === '') {
                isValid = false;
            }
            
            // 檢查圖片和 PDF 檔案上傳
            const uploadedImageCount = UploadManager.uploadedImages ? UploadManager.uploadedImages.length : 0;
            const hasDocument = UploadManager.uploadedDocument !== null && UploadManager.uploadedDocument !== undefined;
            
            if (uploadedImageCount === 0 || !hasDocument) {
                isValid = false;
            }
            
            return isValid;
        }
        
        /**
         * 收集表單資料轉換為 PropertyCreateDto 格式
         */
        function collectFormData() {
            // 收集基本資訊
            const formData = {
                Title: document.getElementById('Title')?.value || '',
                CityId: parseInt(document.getElementById('CityId')?.value) || 0,
                DistrictId: parseInt(document.getElementById('DistrictId')?.value) || 0,
                AddressLine: document.getElementById('AddressLine')?.value || '',
                
                // 房屋資訊
                MonthlyRent: parseFloat(document.getElementById('MonthlyRent')?.value) || 0,
                RoomCount: parseInt(document.getElementById('RoomCount')?.value) || 0,
                LivingRoomCount: parseInt(document.getElementById('LivingRoomCount')?.value) || 0,
                BathroomCount: parseInt(document.getElementById('BathroomCount')?.value) || 0,
                Area: parseFloat(document.getElementById('Area')?.value) || 0,
                CurrentFloor: parseInt(document.getElementById('CurrentFloor')?.value) || 0,
                TotalFloors: parseInt(document.getElementById('TotalFloors')?.value) || 0,
                
                // 費用資訊
                DepositAmount: parseFloat(document.getElementById('DepositAmount')?.value) || 0,
                DepositMonths: parseInt(document.getElementById('DepositMonths')?.value) || 0,
                MinimumRentalMonths: parseInt(document.getElementById('MinimumRentalMonths')?.value) || 0,
                ManagementFeeIncluded: document.querySelector('input[name="ManagementFeeIncluded"]:checked')?.value === 'true',
                ManagementFeeAmount: parseFloat(document.getElementById('ManagementFeeAmount')?.value) || null,
                WaterFeeType: document.getElementById('WaterFeeType')?.value || '',
                CustomWaterFee: parseFloat(document.getElementById('CustomWaterFee')?.value) || null,
                ElectricityFeeType: document.getElementById('ElectricityFeeType')?.value || '',
                CustomElectricityFee: parseFloat(document.getElementById('CustomElectricityFee')?.value) || null,
                ParkingAvailable: document.querySelector('input[name="ParkingAvailable"]:checked')?.value === 'true',
                ParkingFeeRequired: document.getElementById('ParkingFeeRequired')?.checked || false,
                ParkingFeeAmount: parseFloat(document.getElementById('ParkingFeeAmount')?.value) || null,
                CleaningFeeRequired: document.querySelector('input[name="CleaningFeeRequired"]:checked')?.value === 'true',
                CleaningFeeAmount: parseFloat(document.getElementById('CleaningFeeAmount')?.value) || null,
                
                // 特殊守則
                SpecialRules: Array.from(document.querySelectorAll('input[name="SpecialRules"]'))
                    .map(input => input.value.trim())
                    .filter(rule => rule)
                    .join('; '),
                
                // 選中的設備
                SelectedEquipmentIds: Array.from(document.querySelectorAll('input[name="SelectedEquipmentIds"]:checked'))
                    .map(input => parseInt(input.value)),
                
                // 刊登方案
                ListingPlanId: parseInt(document.querySelector('input[name="ListingPlanId"]:checked')?.value) || 0,
                
                // 描述
                Description: document.getElementById('Description')?.value || ''
            };
            
            // 收集設備數量
            formData.EquipmentQuantities = {};
            document.querySelectorAll('input[name="SelectedEquipmentIds"]:checked').forEach(checkbox => {
                const equipmentId = parseInt(checkbox.value);
                const quantityInput = document.getElementById(`quantity_${equipmentId}`);
                formData.EquipmentQuantities[equipmentId] = quantityInput ? parseInt(quantityInput.value) || 1 : 1;
            });
            
            return formData;
        }

        /**
         * 初始化守則動態欄位功能
         */
        function initializeRulesDynamicFields() {
            const rulesContainer = document.getElementById('rulesContainer');
            let ruleCount = 1; // 從 1 開始，因為已有一個預設欄位
            const maxRules = 3;
            
            // 為現有的添加按鈕綁定事件
            bindAddRuleEvent();
            
            function bindAddRuleEvent() {
                const addButtons = rulesContainer.querySelectorAll('.add-rule-btn');
                addButtons.forEach(button => {
                    button.removeEventListener('click', handleAddRule); // 避免重複綁定
                    button.addEventListener('click', handleAddRule);
                });
            }
            
            function handleAddRule(e) {
                e.preventDefault();
                
                if (ruleCount >= maxRules) {
                    return;
                }
                
                // 創建新的守則輸入欄位
                const newRuleGroup = document.createElement('div');
                newRuleGroup.className = 'rule-input-group mb-2';
                newRuleGroup.innerHTML = `
                    <div class="input-group">
                        <input type="text" class="form-control rule-input" name="SpecialRules" 
                               placeholder="請輸入房屋守則（最多20字）" maxlength="20">
                        <button type="button" class="btn btn-outline-danger remove-rule-btn">
                            <i class="fas fa-minus"></i>
                        </button>
                    </div>
                `;
                
                // 添加到容器中
                rulesContainer.appendChild(newRuleGroup);
                ruleCount++;
                
                // 綁定刪除事件
                const removeButton = newRuleGroup.querySelector('.remove-rule-btn');
                removeButton.addEventListener('click', function(e) {
                    e.preventDefault();
                    handleRemoveRule(newRuleGroup);
                });
                
                // 檢查是否需要隱藏添加按鈕
                updateAddButtonsVisibility();
            }
            
            function handleRemoveRule(ruleGroup) {
                ruleGroup.remove();
                ruleCount--;
                updateAddButtonsVisibility();
            }
            
            function updateAddButtonsVisibility() {
                const addButtons = rulesContainer.querySelectorAll('.add-rule-btn');
                
                if (ruleCount >= maxRules) {
                    // 隱藏所有添加按鈕
                    addButtons.forEach(button => {
                        button.style.display = 'none';
                    });
                } else {
                    // 只顯示最後一個添加按鈕
                    addButtons.forEach((button, index) => {
                        if (index === addButtons.length - 1) {
                            button.style.display = 'inline-block';
                        } else {
                            button.style.display = 'none';
                        }
                    });
                }
            }
            
            // 初始化狀態
            updateAddButtonsVisibility();
        }
        
        /**
         * 初始化步驟導航
         */
        function initializeStepNavigation() {
            const stepNavItems = document.querySelectorAll('.step-nav-item');
            const sections = ['basicInfo', 'houseInfo', 'feeInfo', 'equipmentInfo', 'planInfo', 'imageInfo', 'documentInfo'];
            
            // 檢查必要元素是否存在
            if (!stepNavItems.length) {
                console.warn('未找到步驟導航項目');
                return;
            }
            
            // 添加點擊事件
            stepNavItems.forEach(item => {
                item.addEventListener('click', function() {
                    const targetId = this.dataset.target;
                    const targetElement = document.getElementById(targetId);
                    
                    if (!targetElement) {
                        console.error(`未找到目標元素: ${targetId}`);
                        return;
                    }
                    
                    try {
                        // 平滑捲動到目標區塊
                        targetElement.scrollIntoView({ 
                            behavior: 'smooth',
                            block: 'start',
                            inline: 'nearest'
                        });
                        
                        // 更新導航狀態
                        updateStepNavigation(targetId);
                    } catch (error) {
                        console.error('滾動到目標元素時發生錯誤:', error);
                    }
                });
            });
            
            // 監聽滾動事件，更新當前步驟（添加防抖處理）
            let scrollTimer = null;
            window.addEventListener('scroll', function() {
                if (scrollTimer) {
                    clearTimeout(scrollTimer);
                }
                
                scrollTimer = setTimeout(() => {
                    try {
                        requestAnimationFrame(() => {
                            updateCurrentStep();
                            updateProgress();
                        });
                    } catch (error) {
                        console.error('更新步驟導航時發生錯誤:', error);
                    }
                }, 100); // 100ms 防抖延遲
            });
            
            // 初始更新
            updateCurrentStep();
            updateProgress();
        }
        
        /**
         * 更新步驟導航狀態
         */
        function updateStepNavigation(activeStep) {
            const stepNavItems = document.querySelectorAll('.step-nav-item');
            
            stepNavItems.forEach(item => {
                if (item.dataset.target === activeStep) {
                    item.classList.add('active');
                } else {
                    item.classList.remove('active');
                }
            });
        }
        
        /**
         * 更新當前步驟（基於滾動位置）
         */
        function updateCurrentStep() {
            const sections = ['basicInfo', 'houseInfo', 'feeInfo', 'equipmentInfo', 'planInfo', 'imageInfo', 'documentInfo'];
            const scrollPosition = window.scrollY + 200; // 偏移量
            
            let currentSection = '';
            
            sections.forEach(sectionId => {
                const section = document.getElementById(sectionId);
                if (section) {
                    const sectionTop = section.offsetTop;
                    const sectionHeight = section.offsetHeight;
                    
                    if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
                        currentSection = sectionId;
                    }
                }
            });
            
            if (currentSection) {
                updateStepNavigation(currentSection);
            }
        }
        
        /**
         * 更新進度條
         */
        function updateProgress() {
            try {
                const sections = ['basicInfo', 'houseInfo', 'feeInfo', 'equipmentInfo', 'planInfo', 'imageInfo', 'documentInfo'];
                let completedSteps = 0;
                
                sections.forEach(sectionId => {
                    try {
                        const isComplete = validateSection(sectionId);
                        const statusIcon = document.querySelector(`#${sectionId}-status i`);
                        
                        if (statusIcon) {
                            if (isComplete) {
                                statusIcon.className = 'fas fa-check-circle text-success small';
                                completedSteps++;
                            } else {
                                statusIcon.className = 'fas fa-circle text-muted small';
                            }
                        }
                    } catch (error) {
                        console.warn(`驗證步驟 ${sectionId} 時發生錯誤:`, error);
                        // 錯誤時保持原狀態，不影響其他步驟
                    }
                });
                
                const progressPercent = (completedSteps / sections.length) * 100;
                const progressBar = document.getElementById('progressBar');
                if (progressBar) {
                    progressBar.style.width = progressPercent + '%';
                }
            } catch (error) {
                console.error('更新進度條時發生錯誤:', error);
                // 即使更新失敗也不影響其他功能
            }
        }
        
        /**
         * 驗證單個區塊
         */
        function validateSection(sectionId) {
            switch(sectionId) {
                case 'basicInfo':
                    return document.getElementById('Title')?.value?.trim() &&
                           document.getElementById('CityId')?.value &&
                           document.getElementById('DistrictId')?.value &&
                           document.getElementById('AddressLine')?.value?.trim();
                           
                case 'houseInfo':
                    const monthlyRent = document.getElementById('MonthlyRent')?.value;
                    const roomCount = document.getElementById('RoomCount')?.value;
                    const livingRoomCount = document.getElementById('LivingRoomCount')?.value;
                    const bathroomCount = document.getElementById('BathroomCount')?.value;
                    const area = document.getElementById('Area')?.value;
                    const currentFloor = document.getElementById('CurrentFloor')?.value;
                    const totalFloors = document.getElementById('TotalFloors')?.value;
                    
                    // 基本欄位驗證
                    const basicFieldsValid = monthlyRent && monthlyRent !== '' &&
                           roomCount !== '' && roomCount !== null &&
                           livingRoomCount !== '' && livingRoomCount !== null &&
                           bathroomCount && bathroomCount !== '' &&
                           area && area !== '' &&
                           currentFloor !== '' && currentFloor !== null &&
                           totalFloors && totalFloors !== '';
                    
                    // 樓層邏輯驗證：所在樓層不可大於總樓層數
                    const floorLogicValid = currentFloor && totalFloors && 
                                          parseInt(currentFloor) <= parseInt(totalFloors);
                    
                    return basicFieldsValid && floorLogicValid;
                           
                case 'feeInfo':
                    const managementFeeSelected = document.querySelector('input[name="ManagementFeeIncluded"]:checked');
                    const depositAmount = document.getElementById('DepositAmount')?.value;
                    const depositMonths = document.getElementById('DepositMonths')?.value;
                    const minimumRentalMonths = document.getElementById('MinimumRentalMonths')?.value;
                    const waterFeeType = document.getElementById('WaterFeeType')?.value;
                    const electricityFeeType = document.getElementById('ElectricityFeeType')?.value;
                    const cleaningFeeSelected = document.querySelector('input[name="CleaningFeeRequired"]:checked');
                    const parkingSelected = document.querySelector('input[name="ParkingAvailable"]:checked');
                    
                    // 基本欄位驗證
                    let isValid = managementFeeSelected && 
                                 depositAmount && depositAmount !== '' && 
                                 depositMonths && depositMonths !== '' &&
                                 minimumRentalMonths && minimumRentalMonths !== '' &&
                                 waterFeeType && waterFeeType !== '' &&
                                 electricityFeeType && electricityFeeType !== '' &&
                                 cleaningFeeSelected &&
                                 parkingSelected;
                    
                    // 檢查管理費邏輯
                    if (managementFeeSelected && managementFeeSelected.value === 'false') {
                        const managementFeeAmount = document.getElementById('ManagementFeeAmount')?.value;
                        isValid = isValid && managementFeeAmount && managementFeeAmount !== '';
                    }
                    
                    // 檢查水費自訂金額
                    if (waterFeeType === '自訂金額') {
                        const customWaterFee = document.getElementById('CustomWaterFee')?.value;
                        isValid = isValid && customWaterFee && customWaterFee !== '';
                    }
                    
                    // 檢查電費自訂金額
                    if (electricityFeeType === '自訂金額') {
                        const customElectricityFee = document.getElementById('CustomElectricityFee')?.value;
                        isValid = isValid && customElectricityFee && customElectricityFee !== '';
                    }
                    
                    // 檢查清潔費邏輯
                    if (cleaningFeeSelected && cleaningFeeSelected.value === 'true') {
                        const cleaningFeeAmount = document.getElementById('CleaningFeeAmount')?.value;
                        isValid = isValid && cleaningFeeAmount && cleaningFeeAmount !== '';
                    }
                    
                    // 檢查停車位邏輯
                    if (parkingSelected && parkingSelected.value === 'true') {
                        const parkingFeeRequired = document.getElementById('ParkingFeeRequired')?.checked;
                        if (parkingFeeRequired) {
                            const parkingFeeAmount = document.getElementById('ParkingFeeAmount')?.value;
                            isValid = isValid && parkingFeeAmount && parkingFeeAmount !== '';
                        }
                    }
                    
                    return isValid;
                    
                case 'equipmentInfo':
                    // 檢查是否至少選擇了一個設備
                    const selectedEquipment = document.querySelectorAll('input[name="SelectedEquipmentIds"]:checked');
                    return selectedEquipment.length >= 1;
                    
                case 'planInfo':
                    return document.querySelector('input[name="ListingPlanId"]:checked');
                    
                case 'imageInfo':
                    // 檢查房屋照片上傳狀態
                    const hasImages = UploadManager.uploadedImages && UploadManager.uploadedImages.length > 0;
                    return hasImages;
                    
                case 'documentInfo':
                    // 檢查房屋所有權證明文件上傳狀態
                    const hasDocument = UploadManager.uploadedDocument !== null && UploadManager.uploadedDocument !== undefined;
                    return hasDocument;
                    
                default:
                    return false;
            }
        }
    </script>
</body>
</html>