using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System.Security.Claims;
using Xunit;
using Moq;
using zuHause.Controllers;
using zuHause.DTOs;
using zuHause.Models;

namespace zuHause.Tests.Controllers
{
    /// <summary>
    /// 房東個人資料檢視頁面測試
    /// 測試 LandlordController.LandlordProfile 方法的各種場景
    /// </summary>
    public class LandlordProfileTests : IDisposable
    {
        private readonly ZuHauseContext _context;
        private readonly LandlordController _controller;

        public LandlordProfileTests()
        {
            // 使用真實 SQL Server 資料庫進行測試
            var connectionString = "Server=tcp:zuhause.database.windows.net,1433;Initial Catalog=zuHause;Persist Security Info=False;User ID=zuHause_dev;Password=DB$MSIT67;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;";
            
            var options = new DbContextOptionsBuilder<ZuHauseContext>()
                .UseSqlServer(connectionString)
                .Options;

            _context = new ZuHauseContext(options);
            
            // 建立 Mock Logger 和 ImageQueryService
            var mockLogger = new Mock<ILogger<LandlordController>>();
            var mockImageQueryService = new Mock<IImageQueryService>();
            _controller = new LandlordController(mockLogger.Object, _context, mockImageQueryService.Object);
            
            // 清理測試資料
            CleanupTestData().Wait();
        }

        [Fact]
        public async Task LandlordProfile_已登入租客查看有效房東_應該返回房東資料()
        {
            // Given: 使用真實的租客ID (2)
            var tenantUser = CreateMockUser(userId: 2, isLandlord: false);
            SetupControllerContext(_controller, tenantUser);

            // When: 租客訪問真實房東(51)的個人資料頁面
            var result = await _controller.LandlordProfile(landlordId: 51);

            // Then: 應該返回成功的ViewResult
            var viewResult = Assert.IsType<ViewResult>(result);
            var model = Assert.IsType<LandlordProfileDto>(viewResult.Model);

            // And: 驗證基本資料
            Assert.Equal(51, model.LandlordId);
            Assert.Contains("*", model.MaskedName); // 驗證姓名遮蔽
        }

        [Fact]
        public async Task LandlordProfile_房東查看自己資料_應該返回成功()
        {
            // Given: 使用真實的房東ID (51)
            var landlordUser = CreateMockUser(userId: 51, isLandlord: true);
            SetupControllerContext(_controller, landlordUser);

            // When: 房東查看自己的個人資料
            var result = await _controller.LandlordProfile(landlordId: 51);

            // Then: 應該返回成功的ViewResult
            var viewResult = Assert.IsType<ViewResult>(result);
            var model = Assert.IsType<LandlordProfileDto>(viewResult.Model);

            // And: 驗證基本資料
            Assert.Equal(51, model.LandlordId);
            Assert.Contains("*", model.MaskedName); // 驗證姓名遮蔽
        }

        [Fact]
        public async Task LandlordProfile_房東嘗試查看其他房東資料_應該返回Forbid()
        {
            // Given: 使用真實的房東ID (51) 嘗試查看租客ID (2，假設有其他房東)
            var landlordUser = CreateMockUser(userId: 51, isLandlord: true);
            SetupControllerContext(_controller, landlordUser);

            // When: 房東嘗試查看其他用戶的資料（使用租客ID作為測試）
            var result = await _controller.LandlordProfile(landlordId: 2);

            // Then: 應該返回403 Forbidden 或 NotFound（取決於ID 2是否為房東）
            // 如果ID 2不是房東，會返回NotFound；如果是房東，會返回Forbid
            Assert.True(result is ForbidResult || result is NotFoundResult);
        }

        [Fact]
        public async Task LandlordProfile_未登入用戶_應該重導向登入頁()
        {
            // Given: 未設定任何用戶上下文（未登入）
            // Controller 沒有設定用戶資訊

            // When: 嘗試訪問房東個人資料頁面
            var result = await _controller.LandlordProfile(landlordId: 51);

            // Then: 應該重導向到登入頁面
            var redirectResult = Assert.IsType<RedirectToActionResult>(result);
            Assert.Equal("Login", redirectResult.ActionName);
            Assert.Equal("Member", redirectResult.ControllerName);
        }

        [Fact]
        public async Task LandlordProfile_無效房東ID_應該返回NotFound()
        {
            // Given: 使用真實的租客ID (2)
            var user = CreateMockUser(userId: 2, isLandlord: false);
            SetupControllerContext(_controller, user);

            // When: 嘗試訪問不存在的房東ID
            var result = await _controller.LandlordProfile(landlordId: 99999);

            // Then: 應該返回404 Not Found
            Assert.IsType<NotFoundResult>(result);
        }

        [Fact]
        public async Task LandlordProfile_房東無上架房源_應該返回空房源列表()
        {
            // Given: 使用真實的租客ID (2)
            var tenantUser = CreateMockUser(userId: 2, isLandlord: false);
            SetupControllerContext(_controller, tenantUser);

            // When: 訪問房東(51)的個人資料頁面
            var result = await _controller.LandlordProfile(landlordId: 51);

            // Then: 應該返回成功的ViewResult
            var viewResult = Assert.IsType<ViewResult>(result);
            var model = Assert.IsType<LandlordProfileDto>(viewResult.Model);

            // And: 驗證房源列表（根據實際資料可能有或沒有房源）
            Assert.NotNull(model.ListedProperties);
            Assert.Equal(51, model.LandlordId);
        }

        [Fact]
        public async Task LandlordProfile_僅顯示LISTED狀態房源_應該過濾其他狀態()
        {
            // Given: 使用真實的租客ID (2)
            var tenantUser = CreateMockUser(userId: 2, isLandlord: false);
            SetupControllerContext(_controller, tenantUser);

            // When: 訪問房東(51)個人資料頁面
            var result = await _controller.LandlordProfile(landlordId: 51);

            // Then: 應該返回成功的ViewResult
            var viewResult = Assert.IsType<ViewResult>(result);
            var model = Assert.IsType<LandlordProfileDto>(viewResult.Model);

            // And: 所有顯示的房源都應該是LISTED狀態
            Assert.All(model.ListedProperties, p => Assert.Equal("LISTED", p.StatusCode));
        }

        [Fact]
        public async Task LandlordProfile_房源按更新時間降序排列_應該正確排序()
        {
            // Given: 使用真實的租客ID (2)
            var tenantUser = CreateMockUser(userId: 2, isLandlord: false);
            SetupControllerContext(_controller, tenantUser);

            // When: 訪問房東(51)個人資料頁面
            var result = await _controller.LandlordProfile(landlordId: 51);

            // Then: 應該返回成功的ViewResult
            var viewResult = Assert.IsType<ViewResult>(result);
            var model = Assert.IsType<LandlordProfileDto>(viewResult.Model);

            // And: 如果有多個房源，應該按更新時間降序排列（新的在前）
            if (model.ListedProperties.Count > 1)
            {
                for (int i = 0; i < model.ListedProperties.Count - 1; i++)
                {
                    Assert.True(model.ListedProperties[i].UpdatedAt >= model.ListedProperties[i + 1].UpdatedAt,
                        "房源應該按更新時間降序排列");
                }
            }
        }

        // === 輔助方法 ===

        private ClaimsPrincipal CreateMockUser(int userId, bool isLandlord)
        {
            var claims = new List<Claim>
            {
                new Claim("UserId", userId.ToString()),
                new Claim("IsLandlord", isLandlord.ToString())
            };

            return new ClaimsPrincipal(new ClaimsIdentity(claims, "MemberCookieAuth"));
        }

        private void SetupControllerContext(Controller controller, ClaimsPrincipal user)
        {
            controller.ControllerContext = new ControllerContext
            {
                HttpContext = new DefaultHttpContext
                {
                    User = user
                }
            };
        }

        // 移除了 CreateMockLandlord 和 CreateMockProperty 方法
        // 因為我們現在直接使用真實資料庫中的資料進行測試

        /// <summary>
        /// 清理測試資料 - 簡化版，因為使用真實資料庫
        /// </summary>
        private async Task CleanupTestData()
        {
            try
            {
                // 因為使用真實資料，只需要清理 ChangeTracker
                _context.ChangeTracker.Clear();
            }
            catch
            {
                // 忽略清理錯誤
            }
        }
        
        // 移除了 SeedDatabase 方法
        // 因為我們現在直接使用真實資料庫中的資料進行測試

        public void Dispose()
        {
            // 測試結束後清理資料
            CleanupTestData().Wait();
            _context.Dispose();
        }
    }
}